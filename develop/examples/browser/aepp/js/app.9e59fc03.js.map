{"version":3,"file":"js/app.9e59fc03.js","mappings":"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","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../../../src/tx/builder/field-types/deposit.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../../src/tx/builder/field-types/index.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../src/aens.ts","webpack://aepp/../src/spend.ts","webpack://aepp/../src/oracle.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/../../src/contract/delegation-signature.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../src/AeSdkAepp.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Basic' }\"\n      @click=\"view = 'Basic'\"\n    >\n      Basic functionality\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Contracts' }\"\n      @click=\"view = 'Contracts'\"\n    >\n      Smart contracts\n    </a>\n  </div>\n\n  <Component\n    v-if=\"view\"\n    :is=\"view\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\n\nexport default {\n  components: { Connect, Basic, Contracts },\n  data: () => ({ view: '' }),\n  computed: mapState(['aeSdk']),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\">\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\">\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\"></div>\n    </div>\n    <button\n      v-if=\"connectMethod && !walletConnected\"\n      :disabled=\"walletConnecting\"\n      @click=\"connect\"\n    >\n      Connect\n    </button>\n    <button\n      v-if=\"walletConnected\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n  </div>\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected')\n          || (walletConnecting && 'Wallet connecting')\n          || 'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector, BrowserWindowMessageConnection, RpcConnectionDenyError,\n} from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\n\nexport default {\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? 'http://localhost:9000',\n    walletInfo: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async scanForWallets() {\n      return new Promise((resolve) => {\n        let stopScan;\n\n        const handleWallets = async ({ wallets, newWallet }) => {\n          newWallet = newWallet || Object.values(wallets)[0];\n          if (confirm(`Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`)) {\n            stopScan();\n            resolve(newWallet.getConnection());\n          }\n        };\n\n        const scannerConnection = new BrowserWindowMessageConnection();\n        stopScan = walletDetector(scannerConnection, handleWallets);\n      });\n    },\n    async connect() {\n      this.walletConnecting = true;\n      try {\n        if (this.connectMethod === 'reverse-iframe') {\n          this.reverseIframe = document.createElement('iframe');\n          this.reverseIframe.src = this.reverseIframeWalletUrl;\n          this.reverseIframe.style.display = 'none';\n          document.body.appendChild(this.reverseIframe);\n        }\n        const connection = await this.scanForWallets();\n        try {\n          this.walletInfo = await this.aeSdk.connectToWallet(connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnected = true;\n        const { address: { current } } = await this.aeSdk.subscribeAddress('subscribe', 'connected');\n        this.$store.commit('setAddress', Object.keys(current)[0]);\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    async disconnect() {\n      await this.aeSdk.disconnectWallet();\n      this.walletConnected = false;\n      if (this.reverseIframe) this.reverseIframe.remove();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcBroadcastError extends RpcError {\n  static override code = 3;\n\n  override code = 3;\n\n  constructor(data?: any) {\n    super('Broadcast failed');\n    this.data = data;\n    this.name = 'RpcBroadcastError';\n  }\n}\nrpcErrors.push(RpcBroadcastError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  #target?: ImplPostMessage;\n\n  #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage';\nimport { MESSAGE_DIRECTION, METHODS } from './schema';\nimport { UnsupportedPlatformError } from '../utils/errors';\n\ninterface Wallet {\n  info: {\n    id: string;\n    type: string;\n    origin: string;\n  };\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets { [key: string]: Wallet }\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): () => void => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets: Wallets = {};\n\n  connection.connect((\n    { method, params }: { method: string; params: Wallet['info'] },\n    origin: string,\n    source: Window,\n  ) => {\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n    const wallet = {\n      info: params,\n      getConnection() {\n        const isExtension = params.type === 'extension';\n        return new BrowserWindowMessageConnection({\n          sendDirection: isExtension ? MESSAGE_DIRECTION.to_waellet : undefined,\n          receiveDirection: isExtension ? MESSAGE_DIRECTION.to_aepp : undefined,\n          target: source,\n          origin: isExtension ? window.origin : params.origin,\n        });\n      },\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({ wallets, newWallet: wallet });\n  }, () => {});\n\n  return () => connection.disconnect();\n};\n","import { render } from \"./Connect.vue?vue&type=template&id=6bd5b3a6\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/aepp-sdk-js/aepp-sdk-js/examples/browser/aepp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\n\nexport default {\n  components: { Value, SpendCoins, MessageSign },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address\n          ? aeSdk.getBalance(address) : Promise.reject(new Error('Address not available'));\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=0047ad3a\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/aepp-sdk-js/aepp-sdk-js/examples/browser/aepp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <button @click=\"spendPromise = spend()\">\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=2dfeb9b8\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/aepp-sdk-js/aepp-sdk-js/examples/browser/aepp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign a message</h2>\n  <div class=\"group\">\n    <div>\n      <div>Message to sign</div>\n      <div>\n        <input\n          v-model=\"messageToSign\"\n          placeholder=\"I want to <action name> at <time> on <network name>\"\n        >\n      </div>\n    </div>\n    <button @click=\"messageSignPromise = messageSign()\">\n      Sign message\n    </button>\n    <div v-if=\"messageSignPromise\">\n      <div>Message sign result</div>\n      <Value :value=\"messageSignPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    messageToSign: '',\n    messageSignPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign() {\n      return this.aeSdk.signMessage(this.messageToSign);\n    },\n  },\n};\n</script>\n","import { render } from \"./MessageSign.vue?vue&type=template&id=3cebfa35\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/aepp-sdk-js/aepp-sdk-js/examples/browser/aepp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=4d43cf2d\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/aepp-sdk-js/aepp-sdk-js/examples/browser/aepp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea\n          v-model=\"contractSourceCode\"\n          placeholder=\"Contact source code\"\n        />\n      </div>\n    </div>\n    <button @click=\"createPromise = create()\">\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <h2>Compile Contract</h2>\n    <div class=\"group\">\n      <button @click=\"compilePromise = compile()\">\n        Compile\n      </button>\n      <div v-if=\"compilePromise\">\n        <div>Bytecode</div>\n        <Value :value=\"compilePromise\" />\n      </div>\n    </div>\n  </template>\n\n  <template v-if=\"contract\">\n    <h2>Deploy Contract</h2>\n    <div class=\"group\">\n      <div>\n        <div>Deploy argument</div>\n        <div>\n          <input\n            v-model=\"deployArg\"\n            placeholder=\"Deploy argument\"\n          >\n        </div>\n      </div>\n      <button @click=\"deployPromise = deploy()\">\n        Deploy\n      </button>\n      <div v-if=\"deployPromise\">\n        <div>Deployed Contract</div>\n        <Value :value=\"deployPromise\" />\n      </div>\n    </div>\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <h2>Call Contract</h2>\n    <div class=\"group\">\n      <div>\n        <div>Call argument</div>\n        <div>\n          <input\n            v-model=\"callArg\"\n            placeholder=\"Call argument\"\n          >\n        </div>\n      </div>\n      <button @click=\"callPromise = call()\">\n        Call\n      </button>\n      <div v-if=\"callPromise\">\n        <div>Call Result</div>\n        <Value :value=\"callPromise\" />\n      </div>\n    </div>\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n  entrypoint init(f : int) : state = { factor = f }\n  entrypoint calc(x : int) = x * state.factor\n`.trim();\n\nexport default {\n  components: { Value },\n  data: () => ({\n    contractSourceCode,\n    deployArg: 5,\n    callArg: 7,\n    createPromise: null,\n    contract: null,\n    compilePromise: null,\n    deployPromise: null,\n    callPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n      this.contract = shallowRef(\n        await this.aeSdk.initializeContract({ sourceCode: this.contractSourceCode }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy() {\n      return this.contract.$deploy([this.deployArg]);\n    },\n    async call() {\n      return this.contract.calc(this.callArg);\n    },\n  },\n};\n</script>\n","import { render } from \"./Contracts.vue?vue&type=template&id=231183c6\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/aepp-sdk-js/aepp-sdk-js/examples/browser/aepp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=eeea9a82\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss\"\n\nimport exportComponent from \"/home/runner/work/aepp-sdk-js/aepp-sdk-js/examples/browser/aepp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param address - Address\n * @param prefix - Transaction prefix. Default: 'ak'\n * @returns is valid\n */\nexport function isAddressValid(\n  address: string,\n  prefix: Encoding = Encoding.AccountAddress,\n): boolean {\n  try {\n    decode(address as Encoded.Generic<typeof prefix>);\n    const actualPrefix = address.split('_')[0];\n    if (actualPrefix !== prefix) {\n      throw new ArgumentError('Encoded string type', prefix, actualPrefix);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nexport function messageToHash(message: string): Buffer {\n  const p = Buffer.from('aeternity Signed Message:\\n', 'utf8');\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([varuintEncode(p.length), p, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Sign a message, and then verifying that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\n// # AENS\nexport type AensName = `${string}.chain`;\nexport const NAME_TTL = 180000;\n// # max number of block into the future that the name is going to be available\n// # https://github.com/aeternity/protocol/blob/epoch-v0.22.0/AENS.md#update\n// # https://github.com/aeternity/protocol/blob/44a93d3aab957ca820183c3520b9daf6b0fedff4/AENS.md#aens-entry\nexport const NAME_MAX_TTL = 36000;\nexport const NAME_MAX_CLIENT_TTL = 84600;\nexport const CLIENT_TTL = NAME_MAX_CLIENT_TTL;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\nexport const NAME_BID_MAX_LENGTH = 12; // # this is the max length for a domain to be part of a bid\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(name.toLowerCase()), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(name.toLowerCase()),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\nconst AENS_SUFFIX = '.chain';\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param name - AENS name\n */\nexport function isNameValid(name: string): name is AensName {\n  // TODO: probably there are stronger requirements\n  return name.endsWith(AENS_SUFFIX);\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = name.length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = name.length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return name.length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (value < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n      ),\n    );\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport { IllegalArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...coinAmount,\n\n  /**\n   * @param value - Deposit value in string format. Should be equal to '0'.\n   * @param options - Options\n   * @param parameters - Parameters\n   * @returns Deposit value Buffer.\n   */\n  serialize(\n    value: Int | undefined,\n    options: Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    value ??= 0;\n    if (+value !== 0) throw new IllegalArgumentError(`Contract deposit is not refundable, so it should be equal 0, got ${value.toString()} instead`);\n    return coinAmount.serialize(value, options, parameters);\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', tag, tx.tag);\n      return tx;\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n      _pickBiggerFee?: boolean;\n    },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_pickBiggerFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger then ${minFee}`);\n    }\n    return value.toFixed();\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _pickBiggerFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger then ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee Buffer\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl }: { onNode?: Node; absoluteTtl?: boolean },\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += (await onNode.getCurrentKeyBlock()).height;\n    }\n    return value;\n  },\n};\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import _abiVersion from './abi-version';\nimport _address from './address';\nimport _array from './array';\nimport _boolean from './boolean';\nimport _coinAmount from './coin-amount';\nimport _ctVersion from './ct-version';\nimport _deposit from './deposit';\nimport _encoded from './encoded';\nimport _entry from './entry';\nimport _enumeration from './enumeration';\nimport _fee from './fee';\nimport _field from './field';\nimport _gasLimit from './gas-limit';\nimport _gasPrice from './gas-price';\nimport _map from './map';\nimport _mptree from './mptree';\nimport _name from './name';\nimport _nameFee from './name-fee';\nimport _nameId from './name-id';\nimport _nonce from './nonce';\nimport _pointers from './pointers';\nimport _raw from './raw';\nimport _shortUInt from './short-u-int';\nimport _shortUIntConst from './short-u-int-const';\nimport _string from './string';\nimport _ttl from './ttl';\nimport _uInt from './u-int';\nimport _wrapped from './wrapped';\n\n// TODO: remove after fixing https://github.com/Gerrit0/typedoc-plugin-missing-exports/issues/15\nconst abiVersion = _abiVersion;\nconst address = _address;\nconst array = _array;\nconst boolean = _boolean;\nconst coinAmount = _coinAmount;\nconst ctVersion = _ctVersion;\nconst deposit = _deposit;\nconst encoded = _encoded;\nconst entry = _entry;\nconst enumeration = _enumeration;\nconst fee = _fee;\nconst field = _field;\nconst gasLimit = _gasLimit;\nconst gasPrice = _gasPrice;\nconst map = _map;\nconst mptree = _mptree;\nconst name = _name;\nconst nameFee = _nameFee;\nconst nameId = _nameId;\nconst nonce = _nonce;\nconst pointers = _pointers;\nconst raw = _raw;\nconst shortUInt = _shortUInt;\nconst shortUIntConst = _shortUIntConst;\nconst string = _string;\nconst ttl = _ttl;\nconst uInt = _uInt;\nconst wrapped = _wrapped;\n\nexport type BinaryData = Buffer | Buffer[] | Buffer[][]\n| Array<[Buffer, Array<[Buffer, Buffer[]]>]>;\nexport interface Field {\n  serialize: (value: any, options: any, parameters: any) => BinaryData;\n  prepare?: (value: any, options: any, parameters: any) => Promise<any>;\n  deserialize: (value: BinaryData, options: any) => any;\n  recursiveType?: boolean;\n}\n\nexport {\n  abiVersion,\n  address,\n  array,\n  boolean,\n  coinAmount,\n  ctVersion,\n  deposit,\n  encoded,\n  entry,\n  enumeration,\n  fee,\n  field,\n  gasLimit,\n  gasPrice,\n  map,\n  mptree,\n  name,\n  nameFee,\n  nameId,\n  nonce,\n  pointers,\n  raw,\n  shortUInt,\n  shortUIntConst,\n  string,\n  ttl,\n  uInt,\n  wrapped,\n};\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, deposit, gasLimit, gasPrice, fee,\n  address, pointers, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # ORACLE\nexport const ORACLE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 500 };\nexport const QUERY_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\nexport const RESPONSE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl: shortUInt,\n  pointers,\n  clientTtl: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee: coinAmount,\n  queryTtlType: enumeration(ORACLE_TTL_TYPES),\n  queryTtlValue: shortUInt,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { BinaryData, Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId, readInt } from './helpers';\nimport { ArgumentError, DecodeError, SchemaNotFoundError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  const schemas = txSchema.filter((s) => s.tag.constValue === tag);\n  if (schemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  version ??= Math.max(...schemas.map((schema) => schema.version.constValue));\n  const schema = schemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\n/**\n * Build transaction hash\n * @category transaction builder\n * @param params - Object with tx params\n * @param options - options\n * @param options.prefix - Prefix of transaction\n * @returns object Base64Check transaction hash with 'tx_' prefix\n */\nexport function buildTx<\n  E extends Encoding = Encoding.Transaction,\n>(\n  params: TxParams,\n  {\n    prefix,\n  }: {\n    prefix?: E;\n  } = {},\n): Encoded.Generic<E> {\n  const schema = getSchema(params.tag, params.version);\n\n  const binary = schema.map(([key, field]) => (\n    field.serialize(\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key],\n      {\n        ...params,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        unpackTx,\n        buildTx,\n        rebuildTx: (overrideParams: any) => buildTx(\n          { ...params, ...overrideParams },\n        ),\n      },\n      params,\n    )\n  ));\n\n  // @ts-expect-error looks like a TypeScript edge case\n  return encode(rlpEncode(binary), prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * @category transaction builder\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Transaction to unpack\n * @param txType - Expected transaction type\n * @returns Object with transaction param's\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Transaction | Encoded.Poi | Encoded.StateTrees | Encoded.CallStateTree,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  const binary = rlpDecode(decode(encodedTx));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(tag, version);\n  if (txType != null && txType !== tag) throw new DecodeError(`Expected transaction to have ${Tag[txType]} tag, got ${Tag[tag]} instead`);\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('Transaction RLP length', schema.length, binary.length);\n  }\n  return schema.reduce<any>(\n    (acc, [name, field], index) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const deserialized = field.deserialize(binary[index] as BinaryData, { unpackTx });\n      return { ...acc, [name]: deserialized };\n    },\n    {},\n  ) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx or gaAttach\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  const params = unpackTx(contractTx);\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse, getResponse);\n        // TODO: remove after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues.set(key, req.then(async () => pause(750)));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        if (error.response?.bodyAsText == null) throw error;\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          throw error;\n        }\n        error.message = `${new URL(error.request.url).pathname.slice(1)} error`;\n        const message = getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const statusesToNotRetry = [200, 400, 403];\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b);\n      const intervalsInMs = intervals.map((el) => (el / intervalSum) * retryOverallDelay);\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) await pause(intervalsInMs[attempt - 1]);\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\"\n        }\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\"\n        }\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\"\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"]\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\"\n        }\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"]\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\"\n            }\n          }\n        }\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\"\n            }\n          }\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"]\n        }\n      }\n    }\n  }\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\"\n        }\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"]\n        }\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\"\n            }\n          }\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\"\n        }\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\"\n        }\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\"\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\"\n        }\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"]\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper\n};\n\nexport const from: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const type: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"]\n    }\n  }\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CountResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/transactions/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.from,\n    Parameters.limit,\n    Parameters.type\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQuery\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n      }\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\nexport interface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check node version\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion: version,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { buildTx } from '../tx/builder';\nimport { Tag } from '../tx/builder/constants';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param gasUsed - Amount of gas actually used to make calculation more accurate\n * @param queryFee - Oracle query fee\n * @param isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param isMined - Is transaction already mined or not\n * @param options - Options\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(),\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl >= height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n);\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError, isAccountNotFoundError, pause } from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { DRY_RUN_ACCOUNT } from './tx/builder/schema';\nimport { AensName } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError, TransactionError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\n\n/**\n * @category chain\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock',\n  { _expectedMineRate = 180000, _microBlockCycle = 3000, _maxPollInterval = 5000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; _maxPollInterval?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.min(base / 3, _maxPollInterval);\n}\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @returns Current chain height\n */\nexport async function getHeight({ onNode }: { onNode: Node }): Promise<number> {\n  return (await onNode.getCurrentKeyBlockHeight()).height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ onNode }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ onNode }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= _getPollInterval('block', options);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = (await onNode.getCurrentKeyBlockHeight()).height;\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @param options.onNode - Node to use\n * @param options.onAccount - Account to use\n * @param options.verify - Verify transaction before broadcast, throw error if not\n * @param options.waitMined - Ensure that transaction get into block\n * @param options.confirm - Number of micro blocks that should be mined after tx get included\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      __queue != null ? { requestOptions: { customHeaders: { __queue } } } : {},\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && (confirm === true || confirm > 0)) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  onNode: Node;\n  onAccount: AccountBase;\n  verify?: boolean;\n  waitMined?: boolean;\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport {\n  CLIENT_TTL, NAME_TTL, Tag, AensName,\n} from './tx/builder/constants';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @param options.extendPointers - Get the pointers from the node and merge with provided\n * ones. Pointers with the same type will be overwritten\n * @param options.onAccount - Make operation on specific account from sdk (you\n * pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameTtl - Name ttl represented in number of\n * blocks (Max value is 50000 blocks)\n * @param options.clientTtl=84600 a suggestion as to how long any\n * clients should cache this information\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const nameUpdateTx = await buildTxAsync({\n    clientTtl: CLIENT_TTL,\n    nameTtl: NAME_TTL,\n    ...options,\n    tag: Tag.NameUpdateTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  extendPointers?: boolean;\n  clientTtl?: number;\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @returns\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl = NAME_TTL, options = {}) {\n      if (nameTtl > NAME_TTL || nameTtl <= 0) {\n        throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, nameTtl);\n      }\n\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid\n * @param options - options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameFee - Name Fee (By default calculated by sdk)\n * @returns the result of the claim\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, startFee, incrementPercentage)\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string,\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (fraction < 0 || fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport {\n  ORACLE_TTL,\n  ORACLE_TTL_TYPES,\n  QUERY_TTL,\n  RESPONSE_TTL,\n} from './tx/builder/schema';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport {\n  _getPollInterval, getHeight, sendTransaction, SendTransactionOptions,\n} from './chain';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ onNode });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @param options.queryTtl - queryTtl Oracle query time to leave\n * @param options.responseTtl - queryFee Oracle query response time to leave\n * @param options.queryFee - queryFee Oracle query fee\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  options.queryFee ??= (await options.onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    queryTtlType: QUERY_TTL.type,\n    queryTtlValue: QUERY_TTL.value,\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query' | 'queryTtlType' | 'queryTtlValue' | 'responseTtlType' | 'responseTtlValue'>\n& {\n  queryTtlType?: ORACLE_TTL_TYPES;\n  queryTtlValue?: number;\n  responseTtlType?: ORACLE_TTL_TYPES;\n  responseTtlValue?: number;\n};\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @param options.oracleTtlType - Oracle time to leave for extend\n * @param options.oracleTtlValue - Oracle time to leave for extend\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    oracleTtlType: ORACLE_TTL.type,\n    oracleTtlValue: ORACLE_TTL.value,\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'oracleTtlType' | 'oracleTtlValue' | 'callerId' | 'oracleId'>\n& { oracleTtlType?: ORACLE_TTL_TYPES; oracleTtlValue?: number };\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @param options.responseTtl - responseTtl Query response time to leave\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response' | 'responseTtlType' | 'responseTtlValue'>\n& { responseTtlType?: ORACLE_TTL_TYPES; responseTtlValue?: number };\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @param options.queryFee - Oracle query Fee\n * @param options - Options object\n * @param options.abiVersion - Always 0 (do not use virtual machine)\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    oracleTtlValue: ORACLE_TTL.value,\n    oracleTtlType: ORACLE_TTL.type,\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat' | 'oracleTtlType' | 'oracleTtlValue'>\n& {\n  oracleTtlType?: ORACLE_TTL_TYPES;\n  oracleTtlValue?: number;\n};\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema';\nimport { Tag, AensName } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun, sendTransaction,\n  SendTransactionOptions,\n} from '../chain';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call(dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    this.$options.address = buildContractIdByContractTx(tx);\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(`Function ${name} doesn't exist in contract`);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const contractId = this.$options.address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && opt.amount > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null && top != null) {\n        const topKey = typeof top === 'number' ? 'height' : 'hash';\n        opt.nonce = (await getAccount(callerId, { [topKey]: top, onNode })).nonce + 1;\n      }\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { concatBuffers } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\nimport Node from '../Node';\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  options: { omitAddress?: boolean; onAccount: AccountBase; onNode: Node },\n): Promise<Uint8Array> {\n  return options.onAccount.sign(\n    concatBuffers([\n      Buffer.from(await options.onNode.getNetworkId()),\n      ...options.omitAddress === true ? [] : [decode(options.onAccount.address)],\n      ...ids.map((e) => (isNameValid(e) ? produceNameId(e) : e)).map((e) => decode(e)),\n      decode(contractAddress),\n    ]),\n    options,\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { sendTransaction, SendTransactionOptions, getAccount } from '../chain';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param sourceCode - Auth contract source code\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport { ArgumentError, NotImplementedError, TypeError } from './utils/errors';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nexport function getValueOrErrorProxy<Value extends object>(valueCb: () => Value): Value {\n  return new Proxy({}, {\n    ...Object.fromEntries([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n    ].map((name) => [name, () => { throw new NotImplementedError(`${name} proxy request`); }])),\n    get(t: {}, property: string | symbol, receiver: any) {\n      const target = valueCb();\n      const value = Reflect.get(target, property, receiver);\n      return typeof value === 'function' ? value.bind(target) : value;\n    },\n    has(t: {}, property: string | symbol) {\n      return Reflect.has(valueCb(), property);\n    },\n  }) as Value;\n}\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\ninterface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n  nodes?: Array<{ name: string; instance: Node }>;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _resolveAccount(account?: OnAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  _getOptions(): AeSdkMethodsOptions & { onAccount: AccountBase } {\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._resolveAccount()),\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this._getOptions(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    const { onNode, onCompiler, ...otherOptions } = this._getOptions();\n    if (onCompiler == null || onNode == null) {\n      throw new ArgumentError('onCompiler, onNode', 'provided', null);\n    }\n    return Contract.initialize<Methods>({\n      ...otherOptions,\n      onNode,\n      onCompiler,\n      ...options,\n    });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & { onAccount: OnAccount } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = {\n        ...this._getOptions(),\n        ...options,\n        ...options?.onAccount != null && { onAccount: this._resolveAccount(options.onAccount) },\n      };\n      return handler(...args);\n    },\n  ],\n));\n\nexport default AeSdkMethods as new (options?: ConstructorParameters<typeof AeSdkMethods>[0]) =>\nAeSdkMethods & AeSdkMethodsTransformed;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport { CompilerError, DuplicateNodeError, NodeNotFoundError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, getValueOrErrorProxy } from './AeSdkMethods';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: ConstructorParameters<typeof AeSdkMethods>[0] & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  override _getOptions(): {\n    onNode: Node;\n    onAccount: AccountBase;\n    onCompiler: CompilerBase;\n  } {\n    return {\n      ...super._getOptions(),\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { Int } from '../tx/builder/constants';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature as hex string of Uint8Array\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signed data blob\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n}\n","import AccountBase from './Base';\nimport { METHODS } from '../aepp-wallet-communication/schema';\nimport { ArgumentError, NotImplementedError, UnsupportedProtocolError } from '../utils/errors';\nimport { Encoded } from '../utils/encoder';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async sign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using wallet');\n  }\n\n  /**\n   * @returns Signed transaction\n   */\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (innerTx != null) throw new NotImplementedError('innerTx option in AccountRpc');\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  /**\n   * @returns Signed message\n   */\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient\n      .request(METHODS.signMessage, { onAccount: this.address, message });\n    return Buffer.from(signature, 'hex');\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string;\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  #callbacks = new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>();\n\n  #messageId = 0;\n\n  #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      error = e instanceof RpcError ? e : new RpcInternalError();\n    }\n    if (request.id != null) {\n      this.#sendResponse(request.id, request.method as keyof LocalApi, result, error);\n    }\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport AccountRpc from './account/Rpc';\nimport { decode, Encoded } from './utils/encoder';\nimport {\n  Accounts, RPC_VERSION, WalletInfo, Network, WalletApi, AeppApi, Node as NodeRpc,\n} from './aepp-wallet-communication/rpc/types';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema';\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  RpcConnectionError,\n} from './utils/errors';\nimport Node from './Node';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\n\n/**\n * RPC handler for AEPP side\n * Contain functionality for wallet interaction and connect it to sdk\n * @category aepp wallet communication\n */\nexport default class AeSdkAepp extends AeSdkBase {\n  name: string;\n\n  onAddressChange: (a: Accounts) => void;\n\n  onDisconnect: (p: any) => void;\n\n  onNetworkChange: (a: Network) => void;\n\n  rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  _accounts?: Accounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Aepp name\n   * @param options.onAddressChange - Call-back function for update address event\n   * @param options.onDisconnect - Call-back function for disconnect event\n   * @param options.onNetworkChange - Call-back function for update network event\n   */\n  constructor({\n    name,\n    onAddressChange = () => {},\n    onDisconnect = () => {},\n    onNetworkChange = () => {},\n    ...other\n  }: {\n    name: string;\n    onAddressChange?: (a: Accounts) => void;\n    onDisconnect?: (p: any) => void;\n    onNetworkChange?: (a: Network) => void;\n  } & ConstructorParameters<typeof AeSdkBase>[0]) {\n    super(other);\n    this.onAddressChange = onAddressChange;\n    this.onDisconnect = onDisconnect;\n    this.onNetworkChange = onNetworkChange;\n    this.name = name;\n  }\n\n  override _resolveAccount(account: OnAccount = this.addresses()[0]): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (!this.addresses().includes(address)) throw new UnAuthorizedAccountError(address);\n      this._ensureConnected();\n      account = new AccountRpc(this.rpcClient, address);\n    }\n    if (account == null) this._ensureAccountAccess();\n    return super._resolveAccount(account);\n  }\n\n  override addresses(): Encoded.AccountAddress[] {\n    if (this._accounts == null) return [];\n    const current = Object.keys(this._accounts.current)[0];\n    return [\n      ...current != null ? [current] : [], ...Object.keys(this._accounts.connected),\n    ] as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Connect to wallet\n   * @param connection - Wallet connection object\n   * @param options - Options\n   * @param options.connectNode - Request wallet to bind node\n   * @param options.name - Node name\n   * @param options.select - Select this node as current\n   */\n  async connectToWallet(\n    connection: BrowserConnection,\n    { connectNode = false, name = 'wallet-node' }: { connectNode?: boolean; name?: string } = {},\n  ): Promise<WalletInfo & { node?: NodeRpc }> {\n    if (this.rpcClient != null) throw new AlreadyConnectedError('You are already connected to wallet');\n    let disconnectParams: any;\n\n    const updateNetwork = (params: Network): void => {\n      if (connectNode) {\n        if (params.node?.url == null) throw new RpcConnectionError('Missing URLs of the Node');\n        this.pool.delete(name);\n        this.addNode(name, new Node(params.node.url), true);\n      }\n      this.onNetworkChange(params);\n    };\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        delete this.rpcClient;\n        delete this._accounts;\n        this.onDisconnect(disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: (params) => {\n          this._accounts = params;\n          this.onAddressChange(params);\n        },\n        [METHODS.updateNetwork]: updateNetwork,\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    const walletInfo = await client\n      .request(METHODS.connect, { name: this.name, version: RPC_VERSION, connectNode });\n    updateNetwork(walletInfo);\n    this.rpcClient = client;\n    return walletInfo;\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnectWallet(): void {\n    this._ensureConnected();\n    this.rpcClient.notify(METHODS.closeConnection, { reason: 'bye' });\n    this.rpcClient.connection.disconnect();\n  }\n\n  /**\n   * Ask addresses from wallet\n   * @returns Addresses from wallet\n   */\n  async askAddresses(): Promise<Encoded.AccountAddress[]> {\n    this._ensureAccountAccess();\n    return this.rpcClient.request(METHODS.address, undefined);\n  }\n\n  /**\n   * Subscribe for addresses from wallet\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAddress(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>> {\n    this._ensureConnected();\n    const result = await this.rpcClient.request(METHODS.subscribeAddress, { type, value });\n    this._accounts = result.address;\n    return result;\n  }\n\n  _ensureConnected(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    if (this.rpcClient != null) return;\n    throw new NoWalletConnectedError('You are not connected to Wallet');\n  }\n\n  _ensureAccountAccess(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    this._ensureConnected();\n    if (this.addresses().length !== 0) return;\n    throw new UnsubscribedAccountError();\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Aci: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Aci\",\n    modelProperties: {\n      encodedAci: {\n        serializedName: \"encoded_aci\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      externalEncodedAci: {\n        serializedName: \"external_encoded_aci\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      },\n      interface: {\n        serializedName: \"interface\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\"\n        }\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Aci\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      }\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.1.1', '8.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    try {\n      const res = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as { bytecode: Encoded.ContractBytearray; aci: Aci };\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message.replace(/^aci error:/, 'compile error:'));\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowReactive } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdkAepp, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst TESTNET_NODE_URL = 'https://testnet.aeternity.io';\nconst MAINNET_NODE_URL = 'https://mainnet.aeternity.io';\nconst COMPILER_URL = 'https://v7.compiler.stg.aepps.com';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdkAepp instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n    aeSdk: shallowReactive(new AeSdkAepp({\n      name: 'Simple æpp',\n      nodes: [\n        { name: 'testnet', instance: new Node(TESTNET_NODE_URL) },\n        { name: 'mainnet', instance: new Node(MAINNET_NODE_URL) },\n      ],\n      onCompiler: new CompilerHttp(COMPILER_URL),\n      async onNetworkChange({ networkId }) {\n        const [{ name }] = (await this.getNodesInPool())\n          .filter((node) => node.nodeNetworkId === networkId);\n        this.selectNode(name);\n        store.commit('setNetworkId', networkId);\n      },\n      onAddressChange: ({ current }) => store.commit('setAddress', Object.keys(current)[0]),\n      onDisconnect: () => alert('Aepp is disconnected'),\n    })),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(9917); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_hoisted_1","_createVNode","_component_Connect","_hoisted_2","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","connectMethod","type","value","reverseIframeWalletUrl","walletConnected","_createElementBlock","disabled","walletConnecting","args","$options","connect","disconnect","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","walletName","BaseError","Error","constructor","message","super","this","name","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","arguments","length","undefined","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnAuthorizedAccountError","onAccount","UnsubscribedAccountError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","_ref","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","static","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcBroadcastError","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","address","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","isExtension","to_waellet","newWallet","reverseIframe","process","walletInfo","computed","mapState","methods","async","Promise","resolve","stopScan","handleWallets","Object","values","confirm","scannerConnection","walletDetector","document","createElement","src","style","display","body","appendChild","scanForWallets","aeSdk","connectToWallet","error","current","subscribeAddress","$store","commit","keys","disconnectWallet","remove","__exports__","_component_Value","balancePromise","heightPromise","_hoisted_6","nodeInfoPromise","_hoisted_7","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","text","props","Array","String","Number","default","watch","then","result","valueToString","warn","immediate","JSON","stringify","k","v","spendTo","placeholder","spendAmount","spendPayload","spendPromise","spend","pause","setTimeout","duration","mapObject","object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","base58Types","byteSizeForType","ensureValidLength","reqLen","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","components","Value","TextEncoder","messageToSign","messageSignPromise","messageSign","signMessage","SpendCoins","MessageSign","mounted","$watch","networkId","compilerApi","getBalance","reject","getHeight","getNodeInfo","contractSourceCode","createPromise","create","contract","_Fragment","compilePromise","compile","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","deployArg","deployPromise","deploy","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","callArg","callPromise","_hoisted_18","_hoisted_19","trim","shallowRef","initializeContract","sourceCode","$compile","$deploy","calc","Connect","Basic","Contracts","render","isBigNumber","number","isNaN","isInteger","BigNumber","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","toFixed","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","genSalt","random","BigUint64Array","nacl","BigInt","MAX_SAFE_INTEGER","hash","verify","signature","MAX_AUTH_FUN_GAS","NAME_TTL","NAME_MAX_CLIENT_TTL","CLIENT_TTL","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","serialize","_value","consensusProtocolVersion","onNode","deserialize","vm","abi","_getProtocolDetails","c","kind","_ref2","_ref3","toBytes","val","big","hexString","idTagToEncoding","genAddressField","_len","encodings","_key","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","oracleQueryId","senderId","oracleId","_int32","nonceBE","alloc","produceNameId","toLowerCase","commitmentHash","salt","padStart","readInt","AENS_SUFFIX","isNameValid","endsWith","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","serializeAettos","coinAmount","parameters","genEncodedField","encoding","optional","encodedData","genEntryField","txParams","buildTx","ArrayBuffer","isView","startsWith","unpackTx","tx","genEnumerationField","enm","filter","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","_computingMinFee","_pickBiggerFee","minFee","gt","calculateGasLimitMax","gasMax","dividedBy","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","genMapField","_ref4","_ref5","recursiveType","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","node","forEach","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","get","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","path","searchFrom","substring","rec","idx","_ref6","_ref7","genMPTreeField","field","txFields","addressName","genNonceField","senderKey","strategy","getAccountNextNonce","replace","catch","nextNonce","addressAny","pointers","pointer","genShortUIntConstField","constValue","constValueOptional","absoluteTtl","getCurrentKeyBlock","genWrappedField","_abiVersion","_address","_array","boolean","_boolean","_coinAmount","ctVersion","_ctVersion","deposit","_deposit","encoded","_encoded","entry","_entry","enumeration","_enumeration","_fee","_gasLimit","gasPrice","_gasPrice","_map","mptree","_mptree","_name","_nameFee","nameId","_nameId","_nonce","_pointers","raw","_raw","_shortUInt","shortUIntConst","_shortUIntConst","_string","ttl","_ttl","_uInt","wrapped","_wrapped","ORACLE_TTL_TYPES","ORACLE_TTL","delta","QUERY_TTL","RESPONSE_TTL","DRY_RUN_ACCOUNT","pub","CallReturnType","entryAny","entrySignedTx","entryMtreeValueArray","entryTreesPoi","mapContracts","mapAccounts","mapCalls","mapChannels","mapNames","mapOracles","txSchema","balance","flags","gaContract","gaAuthFun","signatures","recipientId","accountId","nameTtl","status","clientTtl","commitmentId","nameSalt","owner","referers","callData","callerId","contractId","callerNonce","gasUsed","returnValue","returnType","queryFormat","responseFormat","queryFee","oracleTtlValue","oracleTtlType","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","channelId","fromId","initiatorAmountFinal","responderAmountFinal","poi","round","toId","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","to","caller","callStack","role","pubkey","accounts","calls","channels","contracts","ns","oracles","authFun","gaId","authData","payerId","rlpDecode","getSchema","_version","schemas","s","max","schema","overrideParams","buildTxAsync","all","prepare","reduce","acc","index","deserialized","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","base","componentsToNumber","reverse","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","Map","policy","request","next","_requestQueues$get","headers","delete","getResponse","req","set","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parse","e","URL","pathname","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","attempt","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","time","pofHash","txsHash","ErrorModel","reason","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","transactions","SignedTx","blockHeight","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","defaultValue","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","Account","payable","NextNonceResponse","DryRunInput","top","txs","txEvents","DryRunAccount","pubKey","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","results","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","OracleQuery","senderNonce","NameEntry","Channel","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","SpendTx","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleRespondTx","NamePreclaimTx","NameClaimTx","NameUpdateTx","NameTransferTx","NameRevokeTx","CommitmentId","NameHash","ChannelCreateTx","ChannelDepositTx","ChannelWithdrawTx","ChannelForceProgressTx","ChannelCloseMutualTx","ChannelCloseSoloTx","ChannelSlashTx","ChannelSettleTx","ChannelSnapshotSoloTx","ChannelSetDelegatesTx","PubKey","PeerDetails","host","port","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","ContractCreateTx","ContractCallTx","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","PayingForTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","limit","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxs","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkey","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","_classPrivateFieldGet2","nodeNetworkId","p","getTransactionSignerAddress","_getSchema$find","getBufferToSign","innerTx","prefixes","rlpBinaryTx","getExecutionCost","isInitiator","res","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","getNetworkId","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","_getPollInterval","_expectedMineRate","_microBlockCycle","_maxPollInterval","block","microblock","txBinary","txWithNetworkId","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref8","oracleCall","contractCreate","contractCall","_ref9","InvalidTxError","validation","poll","_interval","interval","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","sendTransaction","txUnsigned","waitMined","signTransaction","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","assign","verifyTx","getAccount","format","addr","getGeneration","hashOrHeight","_ref10","getMicroBlockTransactions","_ref11","getKeyBlock","_ref12","getMicroBlockHeader","_ref13","txDryRunRequests","txDryRunHandler","rs","dryRunRes","Set","accountAddress","_ref14","_ref15","resultPayload","txDryRun","_ref16","_txDryRunRequests$get","combine","requests","_requests$timeout","timeout","getContractByteCode","_ref17","_ref18","getName","_ref19","resolveName","_ref20","resolveByNode","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","opts","otherOptions","aensBid","recipientIdOrName","transferFunds","fraction","bind","desiredAmount","integerValue","payForTransaction","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","record","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","_options$queryFee","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","handler","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_aeternityAeppCalldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","Contract","onCompiler","compileBySourceCode","fileSystem","sourceCodePath","fnName","callInfoTyped","_getCallResult2","$call","callStatic","_opt$gasLimit","_other$result","_estimateGas","_calldata","other","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topKey","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","aci","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_this","_aci","aciLast","functions","aciArgs","pop","decodedResult","decodeFateString","$getCallResultByTxHash","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","createDelegationSignature","ids","sign","omitAddress","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","getValueOrErrorProxy","valueCb","Proxy","property","receiver","Reflect","_2","chainMethodsOther","chainMethods","aensMethods","spendMethods","oracleMethods","contractGaMethods","AeSdkMethods","_options","_resolveAccount","_getOptions","prototype","AeSdkBase","nodes","instance","addNode","api","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","addresses","AccountBase","AccountRpc","rpcClient","_rpcClient","returnSigned","signedTransaction","RPC_VERSION","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","AeSdkAepp","onAddressChange","onNetworkChange","_ensureConnected","_ensureAccountAccess","_accounts","disconnectParams","connectNode","updateNetwork","_params$node","client","updateAddress","closeConnection","CompileOpts","srcFile","Aci","encodedAci","externalEncodedAci","interface","pos","ErrorPos","file","line","col","CompileResult","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","TESTNET_NODE_URL","MAINNET_NODE_URL","COMPILER_URL","store","createStore","state","shallowReactive","getNodesInPool","alert","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}