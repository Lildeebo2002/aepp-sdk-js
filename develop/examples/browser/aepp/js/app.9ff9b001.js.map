{"version":3,"file":"js/app.9ff9b001.js","mappings":"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","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/PayForTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../../../src/tx/builder/field-types/deposit.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../../src/tx/builder/field-types/index.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/./src/components/GenerateSpendTx.vue?b650","webpack://aepp/./src/PayForTx.vue?2fdc","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../src/aens.ts","webpack://aepp/../src/spend.ts","webpack://aepp/../src/oracle.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/../../src/contract/delegation-signature.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../src/AeSdkAepp.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Basic' }\"\n      @click=\"view = 'Basic'\"\n    >\n      Basic functionality\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Contracts' }\"\n      @click=\"view = 'Contracts'\"\n    >\n      Smart contracts\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'PayForTx' }\"\n      @click=\"view = 'PayForTx'\"\n    >\n      Pay for transaction\n    </a>\n  </div>\n\n  <Component\n    v-if=\"view\"\n    :is=\"view\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\nimport PayForTx from './PayForTx.vue';\n\nexport default {\n  components: {\n    Connect, Basic, Contracts, PayForTx,\n  },\n  data: () => ({ view: '' }),\n  computed: mapState(['aeSdk']),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\">\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\">\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\"></div>\n    </div>\n    <button\n      v-if=\"connectMethod && !walletConnected\"\n      :disabled=\"walletConnecting\"\n      @click=\"connect\"\n    >\n      Connect\n    </button>\n    <button\n      v-if=\"walletConnected\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n  </div>\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected')\n          || (walletConnecting && 'Wallet connecting')\n          || 'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector, BrowserWindowMessageConnection, RpcConnectionDenyError,\n} from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\n\nexport default {\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? 'http://localhost:9000',\n    walletInfo: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async scanForWallets() {\n      return new Promise((resolve) => {\n        let stopScan;\n\n        const handleWallets = async ({ wallets, newWallet }) => {\n          newWallet = newWallet || Object.values(wallets)[0];\n          if (confirm(`Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`)) {\n            stopScan();\n            resolve(newWallet.getConnection());\n          }\n        };\n\n        const scannerConnection = new BrowserWindowMessageConnection();\n        stopScan = walletDetector(scannerConnection, handleWallets);\n      });\n    },\n    async connect() {\n      this.walletConnecting = true;\n      try {\n        if (this.connectMethod === 'reverse-iframe') {\n          this.reverseIframe = document.createElement('iframe');\n          this.reverseIframe.src = this.reverseIframeWalletUrl;\n          this.reverseIframe.style.display = 'none';\n          document.body.appendChild(this.reverseIframe);\n        }\n        const connection = await this.scanForWallets();\n        try {\n          this.walletInfo = await this.aeSdk.connectToWallet(connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnected = true;\n        const { address: { current } } = await this.aeSdk.subscribeAddress('subscribe', 'connected');\n        this.$store.commit('setAddress', Object.keys(current)[0]);\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    async disconnect() {\n      await this.aeSdk.disconnectWallet();\n      this.walletConnected = false;\n      if (this.reverseIframe) this.reverseIframe.remove();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  #target?: ImplPostMessage;\n\n  #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage';\nimport { MESSAGE_DIRECTION, METHODS } from './schema';\nimport { UnsupportedPlatformError } from '../utils/errors';\n\ninterface Wallet {\n  info: {\n    id: string;\n    type: string;\n    origin: string;\n  };\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets { [key: string]: Wallet }\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): () => void => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets: Wallets = {};\n\n  connection.connect((\n    { method, params }: { method: string; params: Wallet['info'] },\n    origin: string,\n    source: Window,\n  ) => {\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n    const wallet = {\n      info: params,\n      getConnection() {\n        const isExtension = params.type === 'extension';\n        return new BrowserWindowMessageConnection({\n          sendDirection: isExtension ? MESSAGE_DIRECTION.to_waellet : undefined,\n          receiveDirection: isExtension ? MESSAGE_DIRECTION.to_aepp : undefined,\n          target: source,\n          origin: isExtension ? window.origin : params.origin,\n        });\n      },\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({ wallets, newWallet: wallet });\n  }, () => {});\n\n  return () => connection.disconnect();\n};\n","import { render } from \"./Connect.vue?vue&type=template&id=6bd5b3a6\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\n\nexport default {\n  components: { Value, SpendCoins, MessageSign },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address\n          ? aeSdk.getBalance(address) : Promise.reject(new Error('Address not available'));\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=0047ad3a\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <button @click=\"spendPromise = spend()\">\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=2dfeb9b8\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign a message</h2>\n  <div class=\"group\">\n    <div>\n      <div>Message to sign</div>\n      <div>\n        <input\n          v-model=\"messageToSign\"\n          placeholder=\"I want to <action name> at <time> on <network name>\"\n        >\n      </div>\n    </div>\n    <button @click=\"messageSignPromise = messageSign()\">\n      Sign message\n    </button>\n    <div v-if=\"messageSignPromise\">\n      <div>Message sign result</div>\n      <Value :value=\"messageSignPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    messageToSign: '',\n    messageSignPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign() {\n      return this.aeSdk.signMessage(this.messageToSign);\n    },\n  },\n};\n</script>\n","import { render } from \"./MessageSign.vue?vue&type=template&id=3cebfa35\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=4d43cf2d\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea\n          v-model=\"contractSourceCode\"\n          placeholder=\"Contact source code\"\n        />\n      </div>\n    </div>\n    <button @click=\"createPromise = create()\">\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <h2>Compile Contract</h2>\n    <div class=\"group\">\n      <button @click=\"compilePromise = compile()\">\n        Compile\n      </button>\n      <div v-if=\"compilePromise\">\n        <div>Bytecode</div>\n        <Value :value=\"compilePromise\" />\n      </div>\n    </div>\n  </template>\n\n  <template v-if=\"contract\">\n    <h2>Deploy Contract</h2>\n    <div class=\"group\">\n      <div>\n        <div>Deploy argument</div>\n        <div>\n          <input\n            v-model=\"deployArg\"\n            placeholder=\"Deploy argument\"\n          >\n        </div>\n      </div>\n      <button @click=\"deployPromise = deploy()\">\n        Deploy\n      </button>\n      <div v-if=\"deployPromise\">\n        <div>Deployed Contract</div>\n        <Value :value=\"deployPromise\" />\n      </div>\n    </div>\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <h2>Call Contract</h2>\n    <div class=\"group\">\n      <div>\n        <div>Call argument</div>\n        <div>\n          <input\n            v-model=\"callArg\"\n            placeholder=\"Call argument\"\n          >\n        </div>\n      </div>\n      <button @click=\"callPromise = call()\">\n        Call\n      </button>\n      <div v-if=\"callPromise\">\n        <div>Call Result</div>\n        <Value :value=\"callPromise\" />\n      </div>\n    </div>\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n  entrypoint init(f : int) : state = { factor = f }\n  entrypoint calc(x : int) = x * state.factor\n`.trim();\n\nexport default {\n  components: { Value },\n  data: () => ({\n    contractSourceCode,\n    deployArg: 5,\n    callArg: 7,\n    createPromise: null,\n    contract: null,\n    compilePromise: null,\n    deployPromise: null,\n    callPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n      this.contract = shallowRef(\n        await this.aeSdk.initializeContract({ sourceCode: this.contractSourceCode }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy() {\n      return this.contract.$deploy([this.deployArg]);\n    },\n    async call() {\n      return this.contract.calc(this.callArg);\n    },\n  },\n};\n</script>\n","import { render } from \"./Contracts.vue?vue&type=template&id=231183c6\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GenerateSpendTx />\n\n  <h2>Sign inner transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Transaction</div>\n      <div>\n        <input\n          v-model=\"txToPayFor\"\n          placeholder=\"tx_...\"\n        >\n      </div>\n    </div>\n    <button @click=\"signInnerTxPromise = signInnerTx()\">\n      Sign\n    </button>\n    <div v-if=\"signInnerTxPromise\">\n      <div>Signed inner transaction</div>\n      <Value :value=\"signInnerTxPromise\" />\n    </div>\n  </div>\n\n  <h2>Pay for transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Signed inner transaction</div>\n      <div>\n        <input\n          v-model=\"innerTx\"\n          placeholder=\"tx_...\"\n        >\n      </div>\n    </div>\n    <button @click=\"payForTxPromise = payForTx()\">\n      Pay for transaction\n    </button>\n    <div v-if=\"payForTxPromise\">\n      <div>Result</div>\n      <Value :value=\"payForTxPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport GenerateSpendTx from './components/GenerateSpendTx.vue';\n\nexport default {\n  components: {\n    Value, SpendCoins, MessageSign, GenerateSpendTx,\n  },\n  data: () => ({\n    innerTx: '',\n    txToPayFor: '',\n    signInnerTxPromise: null,\n    payForTxPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    signInnerTx() {\n      return this.aeSdk.signTransaction(this.txToPayFor, { innerTx: true });\n    },\n    payForTx() {\n      return this.aeSdk.payForTransaction(this.innerTx);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>Generate spend transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <div>\n      <div>Increment nonce by 1</div>\n      <div>\n        <input\n          type=\"checkbox\"\n          v-model=\"incrementNonce\"\n        >\n        (only if you want to pay for this transaction yourself)\n      </div>\n    </div>\n    <button @click=\"generatePromise = generate()\">\n      Generate\n    </button>\n    <div v-if=\"generatePromise\">\n      <div>Spend transaction</div>\n      <Value :value=\"generatePromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport {\n  encode, Encoding, Tag, unpackTx, buildTx,\n} from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    incrementNonce: true,\n    generatePromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async generate() {\n      let spendTx = await this.aeSdk.buildTx({\n        tag: Tag.SpendTx,\n        senderId: this.aeSdk.address,\n        recipientId: this.spendTo,\n        amount: this.spendAmount,\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n      if (this.incrementNonce) {\n        const spendTxParams = unpackTx(spendTx);\n        spendTxParams.nonce += 1;\n        spendTx = buildTx(spendTxParams);\n      }\n      return spendTx;\n    },\n  },\n};\n</script>\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\n// # AENS\nexport type AensName = `${string}.chain`;\nexport const NAME_TTL = 180000;\n// # max number of block into the future that the name is going to be available\n// # https://github.com/aeternity/protocol/blob/epoch-v0.22.0/AENS.md#update\n// # https://github.com/aeternity/protocol/blob/44a93d3aab957ca820183c3520b9daf6b0fedff4/AENS.md#aens-entry\nexport const NAME_MAX_TTL = 36000;\nexport const NAME_MAX_CLIENT_TTL = 84600;\nexport const CLIENT_TTL = NAME_MAX_CLIENT_TTL;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\nexport const NAME_BID_MAX_LENGTH = 12; // # this is the max length for a domain to be part of a bid\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param address - Address\n * @param prefix - Transaction prefix. Default: 'ak'\n * @returns is valid\n */\nexport function isAddressValid(\n  address: string,\n  prefix: Encoding = Encoding.AccountAddress,\n): boolean {\n  try {\n    decode(address as Encoded.Generic<typeof prefix>);\n    const actualPrefix = address.split('_')[0];\n    if (actualPrefix !== prefix) {\n      throw new ArgumentError('Encoded string type', prefix, actualPrefix);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nexport function messageToHash(message: string): Buffer {\n  const p = Buffer.from('aeternity Signed Message:\\n', 'utf8');\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([varuintEncode(p.length), p, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Sign a message, and then verifying that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(name.toLowerCase()), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(name.toLowerCase()),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\nconst AENS_SUFFIX = '.chain';\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param name - AENS name\n */\nexport function isNameValid(name: string): name is AensName {\n  // TODO: probably there are stronger requirements\n  return name.endsWith(AENS_SUFFIX);\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = name.length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = name.length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return name.length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (value < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n      ),\n    );\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport { IllegalArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...coinAmount,\n\n  /**\n   * @param value - Deposit value in string format. Should be equal to '0'.\n   * @param options - Options\n   * @param parameters - Parameters\n   * @returns Deposit value Buffer.\n   */\n  serialize(\n    value: Int | undefined,\n    options: Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    value ??= 0;\n    if (+value !== 0) throw new IllegalArgumentError(`Contract deposit is not refundable, so it should be equal 0, got ${value.toString()} instead`);\n    return coinAmount.serialize(value, options, parameters);\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);\n      return tx;\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n      _pickBiggerFee?: boolean;\n    },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_pickBiggerFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger then ${minFee}`);\n    }\n    return value.toFixed();\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _pickBiggerFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger then ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee Buffer\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl }: { onNode?: Node; absoluteTtl?: boolean },\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += (await onNode.getCurrentKeyBlock()).height;\n    }\n    return value;\n  },\n};\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import _abiVersion from './abi-version';\nimport _address from './address';\nimport _array from './array';\nimport _boolean from './boolean';\nimport _coinAmount from './coin-amount';\nimport _ctVersion from './ct-version';\nimport _deposit from './deposit';\nimport _encoded from './encoded';\nimport _entry from './entry';\nimport _enumeration from './enumeration';\nimport _fee from './fee';\nimport _field from './field';\nimport _gasLimit from './gas-limit';\nimport _gasPrice from './gas-price';\nimport _map from './map';\nimport _mptree from './mptree';\nimport _name from './name';\nimport _nameFee from './name-fee';\nimport _nameId from './name-id';\nimport _nonce from './nonce';\nimport _pointers from './pointers';\nimport _raw from './raw';\nimport _shortUInt from './short-u-int';\nimport _shortUIntConst from './short-u-int-const';\nimport _string from './string';\nimport _ttl from './ttl';\nimport _uInt from './u-int';\nimport _wrapped from './wrapped';\n\n// TODO: remove after fixing https://github.com/Gerrit0/typedoc-plugin-missing-exports/issues/15\nconst abiVersion = _abiVersion;\nconst address = _address;\nconst array = _array;\nconst boolean = _boolean;\nconst coinAmount = _coinAmount;\nconst ctVersion = _ctVersion;\nconst deposit = _deposit;\nconst encoded = _encoded;\nconst entry = _entry;\nconst enumeration = _enumeration;\nconst fee = _fee;\nconst field = _field;\nconst gasLimit = _gasLimit;\nconst gasPrice = _gasPrice;\nconst map = _map;\nconst mptree = _mptree;\nconst name = _name;\nconst nameFee = _nameFee;\nconst nameId = _nameId;\nconst nonce = _nonce;\nconst pointers = _pointers;\nconst raw = _raw;\nconst shortUInt = _shortUInt;\nconst shortUIntConst = _shortUIntConst;\nconst string = _string;\nconst ttl = _ttl;\nconst uInt = _uInt;\nconst wrapped = _wrapped;\n\nexport type BinaryData = Buffer | Buffer[] | Buffer[][]\n| Array<[Buffer, Array<[Buffer, Buffer[]]>]>;\nexport interface Field {\n  serialize: (value: any, options: any, parameters: any) => BinaryData;\n  prepare?: (value: any, options: any, parameters: any) => Promise<any>;\n  deserialize: (value: BinaryData, options: any) => any;\n  recursiveType?: boolean;\n}\n\nexport {\n  abiVersion,\n  address,\n  array,\n  boolean,\n  coinAmount,\n  ctVersion,\n  deposit,\n  encoded,\n  entry,\n  enumeration,\n  fee,\n  field,\n  gasLimit,\n  gasPrice,\n  map,\n  mptree,\n  name,\n  nameFee,\n  nameId,\n  nonce,\n  pointers,\n  raw,\n  shortUInt,\n  shortUIntConst,\n  string,\n  ttl,\n  uInt,\n  wrapped,\n};\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, deposit, gasLimit, gasPrice, fee,\n  address, pointers, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # ORACLE\nexport const ORACLE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 500 };\nexport const QUERY_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\nexport const RESPONSE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl: shortUInt,\n  pointers,\n  clientTtl: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee: coinAmount,\n  queryTtlType: enumeration(ORACLE_TTL_TYPES),\n  queryTtlValue: shortUInt,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { BinaryData, Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId, readInt } from './helpers';\nimport { ArgumentError, DecodeError, SchemaNotFoundError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  const schemas = txSchema.filter((s) => s.tag.constValue === tag);\n  if (schemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  version ??= Math.max(...schemas.map((schema) => schema.version.constValue));\n  const schema = schemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\n/**\n * Build transaction hash\n * @category transaction builder\n * @param params - Object with tx params\n * @param options - options\n * @param options.prefix - Prefix of transaction\n * @returns object Base64Check transaction hash with 'tx_' prefix\n */\nexport function buildTx<\n  E extends Encoding = Encoding.Transaction,\n>(\n  params: TxParams,\n  {\n    prefix,\n  }: {\n    prefix?: E;\n  } = {},\n): Encoded.Generic<E> {\n  const schema = getSchema(params.tag, params.version);\n\n  const binary = schema.map(([key, field]) => (\n    field.serialize(\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key],\n      {\n        ...params,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        unpackTx,\n        buildTx,\n        rebuildTx: (overrideParams: any) => buildTx(\n          { ...params, ...overrideParams },\n        ),\n      },\n      params,\n    )\n  ));\n\n  // @ts-expect-error looks like a TypeScript edge case\n  return encode(rlpEncode(binary), prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * @category transaction builder\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Transaction to unpack\n * @param txType - Expected transaction type\n * @returns Object with transaction param's\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Transaction | Encoded.Poi | Encoded.StateTrees | Encoded.CallStateTree,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  const binary = rlpDecode(decode(encodedTx));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(tag, version);\n  if (txType != null && txType !== tag) throw new DecodeError(`Expected transaction to have ${Tag[txType]} tag, got ${Tag[tag]} instead`);\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('Transaction RLP length', schema.length, binary.length);\n  }\n  return schema.reduce<any>(\n    (acc, [name, field], index) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const deserialized = field.deserialize(binary[index] as BinaryData, { unpackTx });\n      return { ...acc, [name]: deserialized };\n    },\n    {},\n  ) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx or gaAttach\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  const params = unpackTx(contractTx);\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import { render } from \"./GenerateSpendTx.vue?vue&type=template&id=461c8a7b\"\nimport script from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PayForTx.vue?vue&type=template&id=88125744\"\nimport script from \"./PayForTx.vue?vue&type=script&lang=js\"\nexport * from \"./PayForTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=310bae1c\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse, getResponse);\n        // TODO: remove after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues.set(key, req.then(async () => pause(750)));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        if (error.response?.bodyAsText == null) throw error;\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          throw error;\n        }\n        error.message = `${new URL(error.request.url).pathname.slice(1)} error`;\n        const message = getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const statusesToNotRetry = [200, 400, 403];\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b);\n      const intervalsInMs = intervals.map((el) => (el / intervalSum) * retryOverallDelay);\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) await pause(intervalsInMs[attempt - 1]);\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\"\n        }\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\"\n        }\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\"\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"]\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\"\n        }\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"]\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\"\n            }\n          }\n        }\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\"\n            }\n          }\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"]\n        }\n      }\n    }\n  }\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\"\n        }\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"]\n        }\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\"\n            }\n          }\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\"\n        }\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\"\n        }\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\"\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\"\n        }\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"]\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper\n};\n\nexport const from: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const type: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"]\n    }\n  }\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CountResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/transactions/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.from,\n    Parameters.limit,\n    Parameters.type\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQuery\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n      }\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check node version\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion: version,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { buildTx } from '../tx/builder';\nimport { Tag } from '../tx/builder/constants';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param gasUsed - Amount of gas actually used to make calculation more accurate\n * @param queryFee - Oracle query fee\n * @param isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param isMined - Is transaction already mined or not\n * @param options - Options\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(),\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl >= height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n);\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError, isAccountNotFoundError, pause } from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { DRY_RUN_ACCOUNT } from './tx/builder/schema';\nimport { AensName } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError, TransactionError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\n\n/**\n * @category chain\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock',\n  { _expectedMineRate = 180000, _microBlockCycle = 3000, _maxPollInterval = 5000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; _maxPollInterval?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.min(base / 3, _maxPollInterval);\n}\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @returns Current chain height\n */\nexport async function getHeight({ onNode }: { onNode: Node }): Promise<number> {\n  return (await onNode.getCurrentKeyBlockHeight()).height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ onNode }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ onNode }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= _getPollInterval('block', options);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = (await onNode.getCurrentKeyBlockHeight()).height;\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @param options.onNode - Node to use\n * @param options.onAccount - Account to use\n * @param options.verify - Verify transaction before broadcast, throw error if not\n * @param options.waitMined - Ensure that transaction get into block\n * @param options.confirm - Number of micro blocks that should be mined after tx get included\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      __queue != null ? { requestOptions: { customHeaders: { __queue } } } : {},\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && (confirm === true || confirm > 0)) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  onNode: Node;\n  onAccount: AccountBase;\n  verify?: boolean;\n  waitMined?: boolean;\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport {\n  CLIENT_TTL, NAME_TTL, Tag, AensName,\n} from './tx/builder/constants';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @param options.extendPointers - Get the pointers from the node and merge with provided\n * ones. Pointers with the same type will be overwritten\n * @param options.onAccount - Make operation on specific account from sdk (you\n * pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameTtl - Name ttl represented in number of\n * blocks (Max value is 50000 blocks)\n * @param options.clientTtl=84600 a suggestion as to how long any\n * clients should cache this information\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const nameUpdateTx = await buildTxAsync({\n    clientTtl: CLIENT_TTL,\n    nameTtl: NAME_TTL,\n    ...options,\n    tag: Tag.NameUpdateTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  extendPointers?: boolean;\n  clientTtl?: number;\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @returns\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl = NAME_TTL, options = {}) {\n      if (nameTtl > NAME_TTL || nameTtl <= 0) {\n        throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, nameTtl);\n      }\n\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid\n * @param options - options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameFee - Name Fee (By default calculated by sdk)\n * @returns the result of the claim\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, startFee, incrementPercentage)\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string,\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (fraction < 0 || fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport {\n  ORACLE_TTL,\n  ORACLE_TTL_TYPES,\n  QUERY_TTL,\n  RESPONSE_TTL,\n} from './tx/builder/schema';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport {\n  _getPollInterval, getHeight, sendTransaction, SendTransactionOptions,\n} from './chain';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ onNode });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @param options.queryTtl - queryTtl Oracle query time to leave\n * @param options.responseTtl - queryFee Oracle query response time to leave\n * @param options.queryFee - queryFee Oracle query fee\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  options.queryFee ??= (await options.onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    queryTtlType: QUERY_TTL.type,\n    queryTtlValue: QUERY_TTL.value,\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query' | 'queryTtlType' | 'queryTtlValue' | 'responseTtlType' | 'responseTtlValue'>\n& {\n  queryTtlType?: ORACLE_TTL_TYPES;\n  queryTtlValue?: number;\n  responseTtlType?: ORACLE_TTL_TYPES;\n  responseTtlValue?: number;\n};\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @param options.oracleTtlType - Oracle time to leave for extend\n * @param options.oracleTtlValue - Oracle time to leave for extend\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    oracleTtlType: ORACLE_TTL.type,\n    oracleTtlValue: ORACLE_TTL.value,\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'oracleTtlType' | 'oracleTtlValue' | 'callerId' | 'oracleId'>\n& { oracleTtlType?: ORACLE_TTL_TYPES; oracleTtlValue?: number };\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @param options.responseTtl - responseTtl Query response time to leave\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response' | 'responseTtlType' | 'responseTtlValue'>\n& { responseTtlType?: ORACLE_TTL_TYPES; responseTtlValue?: number };\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @param options.queryFee - Oracle query Fee\n * @param options - Options object\n * @param options.abiVersion - Always 0 (do not use virtual machine)\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    oracleTtlValue: ORACLE_TTL.value,\n    oracleTtlType: ORACLE_TTL.type,\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat' | 'oracleTtlType' | 'oracleTtlValue'>\n& {\n  oracleTtlType?: ORACLE_TTL_TYPES;\n  oracleTtlValue?: number;\n};\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema';\nimport { Tag, AensName } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun, sendTransaction,\n  SendTransactionOptions,\n} from '../chain';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call(dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    this.$options.address = buildContractIdByContractTx(tx);\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(`Function ${name} doesn't exist in contract`);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const contractId = this.$options.address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && opt.amount > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null && top != null) {\n        const topKey = typeof top === 'number' ? 'height' : 'hash';\n        opt.nonce = (await getAccount(callerId, { [topKey]: top, onNode })).nonce + 1;\n      }\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { concatBuffers } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\nimport Node from '../Node';\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  options: { omitAddress?: boolean; onAccount: AccountBase; onNode: Node },\n): Promise<Uint8Array> {\n  return options.onAccount.sign(\n    concatBuffers([\n      Buffer.from(await options.onNode.getNetworkId()),\n      ...options.omitAddress === true ? [] : [decode(options.onAccount.address)],\n      ...ids.map((e) => (isNameValid(e) ? produceNameId(e) : e)).map((e) => decode(e)),\n      decode(contractAddress),\n    ]),\n    options,\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { sendTransaction, SendTransactionOptions, getAccount } from '../chain';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param sourceCode - Auth contract source code\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nexport function getValueOrErrorProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n  }\n\n  _getOptions(\n    callOptions: AeSdkMethodsOptions = {},\n  ): AeSdkMethodsOptions & { onAccount: AccountBase; onCompiler: CompilerBase; onNode: Node } {\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._options.onAccount),\n      onNode: getValueOrErrorProxy(() => this._options.onNode),\n      onCompiler: getValueOrErrorProxy(() => this._options.onCompiler),\n      ...callOptions,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this._getOptions(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this._getOptions(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & { onAccount: OnAccount } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this._getOptions(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, getValueOrErrorProxy, AeSdkMethodsOptions } from './AeSdkMethods';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  override _getOptions(callOptions: AeSdkMethodsOptions = {}): {\n    onNode: Node;\n    onAccount: AccountBase;\n    onCompiler: CompilerBase;\n  } {\n    return {\n      ...this._options,\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n      ...callOptions,\n      onAccount: getValueOrErrorProxy(() => this._resolveAccount(callOptions.onAccount)),\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { Int } from '../tx/builder/constants';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature as hex string of Uint8Array\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signed data blob\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n}\n","import AccountBase from './Base';\nimport { METHODS } from '../aepp-wallet-communication/schema';\nimport { ArgumentError, NotImplementedError, UnsupportedProtocolError } from '../utils/errors';\nimport { Encoded } from '../utils/encoder';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async sign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using wallet');\n  }\n\n  /**\n   * @returns Signed transaction\n   */\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  /**\n   * @returns Signed message\n   */\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient\n      .request(METHODS.signMessage, { onAccount: this.address, message });\n    return Buffer.from(signature, 'hex');\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string;\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  #callbacks = new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>();\n\n  #messageId = 0;\n\n  #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport AccountRpc from './account/Rpc';\nimport { decode, Encoded } from './utils/encoder';\nimport {\n  Accounts, RPC_VERSION, WalletInfo, Network, WalletApi, AeppApi, Node as NodeRpc,\n} from './aepp-wallet-communication/rpc/types';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema';\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  RpcConnectionError,\n} from './utils/errors';\nimport Node from './Node';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\n\n/**\n * RPC handler for AEPP side\n * Contain functionality for wallet interaction and connect it to sdk\n * @category aepp wallet communication\n */\nexport default class AeSdkAepp extends AeSdkBase {\n  name: string;\n\n  onAddressChange: (a: Accounts) => void;\n\n  onDisconnect: (p: any) => void;\n\n  onNetworkChange: (a: Network) => void;\n\n  rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  _accounts?: Accounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Aepp name\n   * @param options.onAddressChange - Call-back function for update address event\n   * @param options.onDisconnect - Call-back function for disconnect event\n   * @param options.onNetworkChange - Call-back function for update network event\n   */\n  constructor({\n    name,\n    onAddressChange = () => {},\n    onDisconnect = () => {},\n    onNetworkChange = () => {},\n    ...other\n  }: {\n    name: string;\n    onAddressChange?: (a: Accounts) => void;\n    onDisconnect?: (p: any) => void;\n    onNetworkChange?: (a: Network) => void;\n  } & ConstructorParameters<typeof AeSdkBase>[0]) {\n    super(other);\n    this.onAddressChange = onAddressChange;\n    this.onDisconnect = onDisconnect;\n    this.onNetworkChange = onNetworkChange;\n    this.name = name;\n  }\n\n  override _resolveAccount(account: OnAccount = this.addresses()[0]): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (!this.addresses().includes(address)) throw new UnAuthorizedAccountError(address);\n      this._ensureConnected();\n      account = new AccountRpc(this.rpcClient, address);\n    }\n    if (account == null) this._ensureAccountAccess();\n    return super._resolveAccount(account);\n  }\n\n  override addresses(): Encoded.AccountAddress[] {\n    if (this._accounts == null) return [];\n    const current = Object.keys(this._accounts.current)[0];\n    return [\n      ...current != null ? [current] : [], ...Object.keys(this._accounts.connected),\n    ] as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Connect to wallet\n   * @param connection - Wallet connection object\n   * @param options - Options\n   * @param options.connectNode - Request wallet to bind node\n   * @param options.name - Node name\n   * @param options.select - Select this node as current\n   */\n  async connectToWallet(\n    connection: BrowserConnection,\n    { connectNode = false, name = 'wallet-node' }: { connectNode?: boolean; name?: string } = {},\n  ): Promise<WalletInfo & { node?: NodeRpc }> {\n    if (this.rpcClient != null) throw new AlreadyConnectedError('You are already connected to wallet');\n    let disconnectParams: any;\n\n    const updateNetwork = (params: Network): void => {\n      if (connectNode) {\n        if (params.node?.url == null) throw new RpcConnectionError('Missing URLs of the Node');\n        this.pool.delete(name);\n        this.addNode(name, new Node(params.node.url), true);\n      }\n      this.onNetworkChange(params);\n    };\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        delete this.rpcClient;\n        delete this._accounts;\n        this.onDisconnect(disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: (params) => {\n          this._accounts = params;\n          this.onAddressChange(params);\n        },\n        [METHODS.updateNetwork]: updateNetwork,\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    const walletInfo = await client\n      .request(METHODS.connect, { name: this.name, version: RPC_VERSION, connectNode });\n    updateNetwork(walletInfo);\n    this.rpcClient = client;\n    return walletInfo;\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnectWallet(): void {\n    this._ensureConnected();\n    this.rpcClient.notify(METHODS.closeConnection, { reason: 'bye' });\n    this.rpcClient.connection.disconnect();\n  }\n\n  /**\n   * Ask addresses from wallet\n   * @returns Addresses from wallet\n   */\n  async askAddresses(): Promise<Encoded.AccountAddress[]> {\n    this._ensureAccountAccess();\n    return this.rpcClient.request(METHODS.address, undefined);\n  }\n\n  /**\n   * Subscribe for addresses from wallet\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAddress(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>> {\n    this._ensureConnected();\n    const result = await this.rpcClient.request(METHODS.subscribeAddress, { type, value });\n    this._accounts = result.address;\n    return result;\n  }\n\n  _ensureConnected(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    if (this.rpcClient != null) return;\n    throw new NoWalletConnectedError('You are not connected to Wallet');\n  }\n\n  _ensureAccountAccess(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    this._ensureConnected();\n    if (this.addresses().length !== 0) return;\n    throw new UnsubscribedAccountError();\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Aci: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Aci\",\n    modelProperties: {\n      encodedAci: {\n        serializedName: \"encoded_aci\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      externalEncodedAci: {\n        serializedName: \"external_encoded_aci\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      },\n      interface: {\n        serializedName: \"interface\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\"\n        }\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Aci\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      }\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.1.1', '8.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    try {\n      const res = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as { bytecode: Encoded.ContractBytearray; aci: Aci };\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message.replace(/^aci error:/, 'compile error:'));\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowReactive } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdkAepp, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst TESTNET_NODE_URL = 'https://testnet.aeternity.io';\nconst MAINNET_NODE_URL = 'https://mainnet.aeternity.io';\nconst COMPILER_URL = 'https://v7.compiler.aepps.com';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdkAepp instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n    aeSdk: shallowReactive(new AeSdkAepp({\n      name: 'Simple æpp',\n      nodes: [\n        { name: 'testnet', instance: new Node(TESTNET_NODE_URL) },\n        { name: 'mainnet', instance: new Node(MAINNET_NODE_URL) },\n      ],\n      onCompiler: new CompilerHttp(COMPILER_URL),\n      async onNetworkChange({ networkId }) {\n        const [{ name }] = (await this.getNodesInPool())\n          .filter((node) => node.nodeNetworkId === networkId);\n        this.selectNode(name);\n        store.commit('setNetworkId', networkId);\n      },\n      onAddressChange: ({ current }) => store.commit('setAddress', Object.keys(current)[0]),\n      onDisconnect: () => alert('Aepp is disconnected'),\n    })),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(1133); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_hoisted_1","_createVNode","_component_Connect","_hoisted_2","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","connectMethod","type","value","reverseIframeWalletUrl","walletConnected","_createElementBlock","disabled","walletConnecting","args","$options","connect","disconnect","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","walletName","BaseError","Error","constructor","message","super","this","name","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","arguments","length","undefined","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnAuthorizedAccountError","onAccount","UnsubscribedAccountError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","_ref","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","static","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","address","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","isExtension","to_waellet","newWallet","reverseIframe","process","walletInfo","computed","mapState","methods","async","Promise","resolve","stopScan","handleWallets","Object","values","confirm","scannerConnection","walletDetector","document","createElement","src","style","display","body","appendChild","scanForWallets","aeSdk","connectToWallet","error","current","subscribeAddress","$store","commit","keys","disconnectWallet","remove","__exports__","_component_Value","balancePromise","heightPromise","_hoisted_6","nodeInfoPromise","_hoisted_7","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","text","props","Array","String","Number","default","watch","then","result","valueToString","warn","immediate","JSON","stringify","k","v","spendTo","placeholder","spendAmount","spendPayload","spendPromise","spend","pause","setTimeout","duration","mapObject","object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","components","Value","TextEncoder","messageToSign","messageSignPromise","messageSign","signMessage","SpendCoins","MessageSign","mounted","$watch","networkId","compilerApi","getBalance","reject","getHeight","getNodeInfo","contractSourceCode","createPromise","create","contract","_Fragment","compilePromise","compile","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","deployArg","deployPromise","deploy","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","callArg","callPromise","_hoisted_18","_hoisted_19","trim","shallowRef","initializeContract","sourceCode","$compile","$deploy","calc","_component_GenerateSpendTx","txToPayFor","signInnerTxPromise","signInnerTx","innerTx","payForTxPromise","payForTx","incrementNonce","generatePromise","generate","MAX_AUTH_FUN_GAS","NAME_TTL","NAME_MAX_CLIENT_TTL","CLIENT_TTL","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","genSalt","random","BigUint64Array","nacl","BigInt","MAX_SAFE_INTEGER","hash","verify","signature","detached","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","serialize","_value","consensusProtocolVersion","onNode","deserialize","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","_ref2","_ref3","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","_len","encodings","_key","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","oracleQueryId","senderId","oracleId","_int32","nonceBE","alloc","produceNameId","toLowerCase","commitmentHash","salt","padStart","readInt","AENS_SUFFIX","isNameValid","endsWith","getMinimumNameFee","nameLength","Math","min","isAuctionName","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","coinAmount","parameters","genEncodedField","encoding","optional","encodedData","genEntryField","txParams","buildTx","ArrayBuffer","isView","startsWith","unpackTx","tx","genEnumerationField","enm","filter","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","_computingMinFee","_pickBiggerFee","minFee","gt","calculateGasLimitMax","gasMax","dividedBy","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","genMapField","Mtree","MtreeValue","_ref4","_ref5","recursiveType","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","node","forEach","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","get","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","path","searchFrom","substring","rec","idx","_ref6","_ref7","genMPTreeField","field","txFields","addressName","genNonceField","senderKey","strategy","getAccountNextNonce","replace","catch","nextNonce","addressAny","pointers","pointer","genShortUIntConstField","constValue","constValueOptional","absoluteTtl","getCurrentKeyBlock","genWrappedField","_abiVersion","_address","_array","boolean","_boolean","_coinAmount","ctVersion","_ctVersion","deposit","_deposit","encoded","_encoded","entry","_entry","enumeration","_enumeration","_fee","_gasLimit","gasPrice","_gasPrice","_map","mptree","_mptree","_name","_nameFee","nameId","_nameId","_nonce","_pointers","raw","_raw","_shortUInt","shortUIntConst","_shortUIntConst","_string","ttl","_ttl","_uInt","wrapped","_wrapped","ORACLE_TTL_TYPES","ORACLE_TTL","delta","QUERY_TTL","RESPONSE_TTL","DRY_RUN_ACCOUNT","pub","CallReturnType","entryAny","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","txSchema","balance","flags","gaContract","gaAuthFun","signatures","SpendTx","recipientId","accountId","nameTtl","status","clientTtl","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","NameTransferTx","NameRevokeTx","owner","referers","callData","callerId","contractId","callerNonce","gasUsed","returnValue","returnType","queryFormat","responseFormat","queryFee","oracleTtlValue","oracleTtlType","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","to","caller","callStack","ChannelClientReconnectTx","role","pubkey","accounts","calls","channels","contracts","ns","oracles","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","_version","schemas","s","max","schema","overrideParams","buildTxAsync","all","prepare","reduce","acc","index","deserialized","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","spendTx","spendTxParams","GenerateSpendTx","signTransaction","payForTransaction","Connect","Basic","Contracts","PayForTx","render","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","base","componentsToNumber","reverse","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","Map","policy","request","next","_requestQueues$get","headers","delete","getResponse","req","set","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parse","e","URL","pathname","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","attempt","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","time","pofHash","txsHash","ErrorModel","reason","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","transactions","blockHeight","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","defaultValue","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","top","txs","txEvents","DryRunAccount","pubKey","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","results","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","NameEntry","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","host","port","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","limit","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxs","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkey","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","_classPrivateFieldGet2","nodeNetworkId","p","getTransactionSignerAddress","_getSchema$find","getBufferToSign","prefixes","rlpBinaryTx","getExecutionCost","isInitiator","res","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","getNetworkId","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","_getPollInterval","_expectedMineRate","_microBlockCycle","_maxPollInterval","block","microblock","txBinary","txWithNetworkId","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref8","oracleCall","contractCreate","contractCall","_ref9","InvalidTxError","validation","poll","_interval","interval","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","sendTransaction","txUnsigned","waitMined","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","assign","verifyTx","getAccount","format","addr","getGeneration","hashOrHeight","_ref10","getMicroBlockTransactions","_ref11","getKeyBlock","_ref12","getMicroBlockHeader","_ref13","txDryRunRequests","txDryRunHandler","rs","dryRunRes","Set","accountAddress","_ref14","_ref15","resultPayload","txDryRun","_ref16","_txDryRunRequests$get","combine","requests","_requests$timeout","timeout","getContractByteCode","_ref17","_ref18","getName","_ref19","resolveName","_ref20","resolveByNode","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","opts","otherOptions","aensBid","recipientIdOrName","transferFunds","fraction","bind","desiredAmount","integerValue","ROUND_HALF_UP","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","record","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","_options$queryFee","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","handler","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_aeternityAeppCalldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","onCompiler","compileBySourceCode","fileSystem","sourceCodePath","fnName","callInfoTyped","_getCallResult2","$call","callStatic","_opt$gasLimit","_other$result","_estimateGas","_calldata","other","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topKey","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","aci","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_this","_aci","aciLast","functions","aciArgs","pop","decodedResult","decodeFateString","$getCallResultByTxHash","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","createDelegationSignature","ids","sign","omitAddress","createGeneralizedAccount","authFnName","_options$gasLimit","initialize","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","getValueOrErrorProxy","valueCb","Proxy","Reflect","_2","chainMethodsOther","chainMethods","aensMethods","spendMethods","oracleMethods","contractGaMethods","AeSdkMethods","_options","_getOptions","callOptions","prototype","_len2","_key2","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","addresses","_resolveAccount","AccountBase","AccountRpc","rpcClient","_rpcClient","returnSigned","signedTransaction","RPC_VERSION","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","AeSdkAepp","onAddressChange","onNetworkChange","_ensureConnected","_ensureAccountAccess","_accounts","disconnectParams","connectNode","updateNetwork","_params$node","client","updateAddress","closeConnection","CompileOpts","srcFile","Aci","encodedAci","externalEncodedAci","interface","pos","ErrorPos","file","line","col","CompileResult","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","TESTNET_NODE_URL","MAINNET_NODE_URL","COMPILER_URL","store","createStore","state","shallowReactive","getNodesInPool","alert","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}