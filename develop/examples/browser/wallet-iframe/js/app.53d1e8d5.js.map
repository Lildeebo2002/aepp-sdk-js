{"version":3,"file":"js/app.53d1e8d5.js","mappings":"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","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/deposit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/index.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../src/aens.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../src/oracle.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/delegation-signature.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <h2>Wallet Iframe</h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n    <button @click=\"disconnect\">Disconnect</button>\n  </div>\n\n  <iframe\n    v-if=\"!runningInFrame\"\n    ref=\"aepp\"\n    :src=\"aeppUrl\"\n  />\n</template>\n\n<script>\nimport {\n  MemoryAccount, generateKeyPair, AeSdkWallet, Node, CompilerHttp,\n  BrowserWindowMessageConnection, METHODS, WALLET_TYPE,\n  RpcConnectionDenyError, RpcRejectedByUserError, unpackTx, decodeFateValue,\n} from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    aeppUrl: process.env.VUE_APP_AEPP_URL ?? 'http://localhost:9001',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n  }),\n  methods: {\n    async shareWalletInfo(clientId, { interval = 5000, attemps = 5 } = {}) {\n      this.aeSdk.shareWalletInfo(clientId);\n      while (attemps) {\n        await new Promise((resolve) => {\n          setTimeout(resolve, interval);\n        });\n        this.aeSdk.shareWalletInfo(clientId);\n        attemps -= 1;\n      }\n      console.log('Finish sharing wallet info');\n    },\n    disconnect() {\n      Object.values(this.aeSdk.rpcClients).forEach((client) => {\n        client.notify(METHODS.closeConnection);\n        client.disconnect();\n      });\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      this.nodeName = (await this.aeSdk.getNodesInPool())\n        .map(({ name }) => name)\n        .find((name) => name !== this.nodeName);\n      this.aeSdk.selectNode(this.nodeName);\n    },\n  },\n  mounted() {\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (!confirm([\n        `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}`,\n        Value.methods.valueToString(parameters),\n      ].join('\\n'))) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, aci, decodedData: decodeFateValue(data, aci) };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      static generate() {\n        // TODO: can inherit parent method after implementing https://github.com/aeternity/aepp-sdk-js/issues/1672\n        return new AccountMemoryProtected(generateKeyPair().secretKey);\n      }\n    }\n\n    let clientId;\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect() {\n        this.shareWalletInfo(clientId);\n      },\n    });\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n    const connection = new BrowserWindowMessageConnection({ target });\n    clientId = this.aeSdk.addRpcClient(connection);\n    this.shareWalletInfo(clientId);\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param type - Type of data to sign\n   * @param data - Encoded data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param address - Address\n * @param prefix - Transaction prefix. Default: 'ak'\n * @returns is valid\n */\nexport function isAddressValid(\n  address: string,\n  prefix: Encoding = Encoding.AccountAddress,\n): boolean {\n  try {\n    decode(address as Encoded.Generic<typeof prefix>);\n    const actualPrefix = address.split('_')[0];\n    if (actualPrefix !== prefix) {\n      throw new ArgumentError('Encoded string type', prefix, actualPrefix);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Sign a message, and then verifying that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","// js extension is required for mjs build\n// @ts-expect-error see https://github.com/aeternity/aepp-calldata-js/issues/216\n// eslint-disable-next-line import/extensions\nimport ContractByteArrayEncoder from '@aeternity/aepp-calldata/src/ContractByteArrayEncoder.js';\n// @ts-expect-error see https://github.com/aeternity/aepp-calldata-js/issues/216\n// eslint-disable-next-line import/extensions\nimport AciTypeResolver from '@aeternity/aepp-calldata/src/AciTypeResolver.js';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n// TODO: replace with api on calldata side https://github.com/aeternity/aepp-calldata-js/issues/216\nexport function encodeFateValue(\n  value: unknown,\n  aci: AciValue,\n): Encoded.ContractBytearray {\n  const contractByteArrayEncoder = new ContractByteArrayEncoder();\n  const aciTypeResolver = new AciTypeResolver([]);\n  aciTypeResolver.isCustomType = () => false;\n  return contractByteArrayEncoder.encode(aciTypeResolver.resolveType(aci), value);\n}\n\n// TODO: replace with api on calldata side https://github.com/aeternity/aepp-calldata-js/issues/216\nexport function decodeFateValue(\n  value: Encoded.ContractBytearray,\n  aci: AciValue,\n): Encoded.ContractBytearray {\n  const contractByteArrayEncoder = new ContractByteArrayEncoder();\n  const aciTypeResolver = new AciTypeResolver([]);\n  aciTypeResolver.isCustomType = () => false;\n  return contractByteArrayEncoder.decodeWithType(value, aciTypeResolver.resolveType(aci));\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  return hash(decode(encodeFateValue(domain, domainAci)));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\n// # AENS\nexport type AensName = `${string}.chain`;\nexport const NAME_TTL = 180000;\n// # max number of block into the future that the name is going to be available\n// # https://github.com/aeternity/protocol/blob/epoch-v0.22.0/AENS.md#update\n// # https://github.com/aeternity/protocol/blob/44a93d3aab957ca820183c3520b9daf6b0fedff4/AENS.md#aens-entry\nexport const NAME_MAX_TTL = 36000;\nexport const NAME_MAX_CLIENT_TTL = 84600;\nexport const CLIENT_TTL = NAME_MAX_CLIENT_TTL;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param name - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param name - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (value < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n      ),\n    );\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport { IllegalArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...coinAmount,\n\n  /**\n   * @param value - Deposit value in string format. Should be equal to '0'.\n   * @param options - Options\n   * @param parameters - Parameters\n   * @returns Deposit value Buffer.\n   */\n  serialize(\n    value: Int | undefined,\n    options: Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    value ??= 0;\n    if (+value !== 0) throw new IllegalArgumentError(`Contract deposit is not refundable, so it should be equal 0, got ${value.toString()} instead`);\n    return coinAmount.serialize(value, options, parameters);\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);\n      return tx;\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n      _pickBiggerFee?: boolean;\n    },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_pickBiggerFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger then ${minFee}`);\n    }\n    return value.toFixed();\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _pickBiggerFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger then ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee Buffer\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl }: { onNode?: Node; absoluteTtl?: boolean },\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += (await onNode.getCurrentKeyBlock()).height;\n    }\n    return value;\n  },\n};\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import _abiVersion from './abi-version';\nimport _address from './address';\nimport _array from './array';\nimport _boolean from './boolean';\nimport _coinAmount from './coin-amount';\nimport _ctVersion from './ct-version';\nimport _deposit from './deposit';\nimport _encoded from './encoded';\nimport _entry from './entry';\nimport _enumeration from './enumeration';\nimport _fee from './fee';\nimport _field from './field';\nimport _gasLimit from './gas-limit';\nimport _gasPrice from './gas-price';\nimport _map from './map';\nimport _mptree from './mptree';\nimport _name from './name';\nimport _nameFee from './name-fee';\nimport _nameId from './name-id';\nimport _nonce from './nonce';\nimport _pointers from './pointers';\nimport _raw from './raw';\nimport _shortUInt from './short-u-int';\nimport _shortUIntConst from './short-u-int-const';\nimport _string from './string';\nimport _ttl from './ttl';\nimport _uInt from './u-int';\nimport _wrapped from './wrapped';\n\n// TODO: remove after fixing https://github.com/Gerrit0/typedoc-plugin-missing-exports/issues/15\nconst abiVersion = _abiVersion;\nconst address = _address;\nconst array = _array;\nconst boolean = _boolean;\nconst coinAmount = _coinAmount;\nconst ctVersion = _ctVersion;\nconst deposit = _deposit;\nconst encoded = _encoded;\nconst entry = _entry;\nconst enumeration = _enumeration;\nconst fee = _fee;\nconst field = _field;\nconst gasLimit = _gasLimit;\nconst gasPrice = _gasPrice;\nconst map = _map;\nconst mptree = _mptree;\nconst name = _name;\nconst nameFee = _nameFee;\nconst nameId = _nameId;\nconst nonce = _nonce;\nconst pointers = _pointers;\nconst raw = _raw;\nconst shortUInt = _shortUInt;\nconst shortUIntConst = _shortUIntConst;\nconst string = _string;\nconst ttl = _ttl;\nconst uInt = _uInt;\nconst wrapped = _wrapped;\n\nexport type BinaryData = Buffer | Buffer[] | Buffer[][]\n| Array<[Buffer, Array<[Buffer, Buffer[]]>]>;\nexport interface Field {\n  serialize: (value: any, options: any, parameters: any) => BinaryData;\n  prepare?: (value: any, options: any, parameters: any) => Promise<any>;\n  deserialize: (value: BinaryData, options: any) => any;\n  recursiveType?: boolean;\n}\n\nexport {\n  abiVersion,\n  address,\n  array,\n  boolean,\n  coinAmount,\n  ctVersion,\n  deposit,\n  encoded,\n  entry,\n  enumeration,\n  fee,\n  field,\n  gasLimit,\n  gasPrice,\n  map,\n  mptree,\n  name,\n  nameFee,\n  nameId,\n  nonce,\n  pointers,\n  raw,\n  shortUInt,\n  shortUIntConst,\n  string,\n  ttl,\n  uInt,\n  wrapped,\n};\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, deposit, gasLimit, gasPrice, fee,\n  address, pointers, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # ORACLE\nexport const ORACLE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 500 };\nexport const QUERY_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\nexport const RESPONSE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl: shortUInt,\n  pointers,\n  clientTtl: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee: coinAmount,\n  queryTtlType: enumeration(ORACLE_TTL_TYPES),\n  queryTtlValue: shortUInt,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { BinaryData, Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId, readInt } from './helpers';\nimport { ArgumentError, DecodeError, SchemaNotFoundError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  const schemas = txSchema.filter((s) => s.tag.constValue === tag);\n  if (schemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  version ??= Math.max(...schemas.map((schema) => schema.version.constValue));\n  const schema = schemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction hash\n * @category transaction builder\n * @param params - Object with tx params\n * @param options - options\n * @param options.prefix - Prefix of transaction\n * @returns object Base64Check transaction hash with 'tx_' prefix\n */\nexport function buildTx<E extends TxEncoding = Encoding.Transaction>(\n  params: TxParams,\n  { prefix }: { prefix?: E } = {},\n): Encoded.Generic<E> {\n  const schema = getSchema(params.tag, params.version);\n\n  const binary = schema.map(([key, field]) => (\n    field.serialize(\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key],\n      {\n        ...params,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        unpackTx,\n        buildTx,\n        rebuildTx: (overrideParams: any) => buildTx(\n          { ...params, ...overrideParams },\n        ),\n      },\n      params,\n    )\n  ));\n\n  // @ts-expect-error looks like a TypeScript edge case\n  return encode(rlpEncode(binary), prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * @category transaction builder\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Transaction to unpack\n * @param txType - Expected transaction type\n * @returns Object with transaction param's\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  const binary = rlpDecode(decode(encodedTx));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(tag, version);\n  if (txType != null && txType !== tag) throw new DecodeError(`Expected transaction to have ${Tag[txType]} tag, got ${Tag[tag]} instead`);\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('Transaction RLP length', schema.length, binary.length);\n  }\n  return schema.reduce<any>(\n    (acc, [name, field], index) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const deserialized = field.deserialize(binary[index] as BinaryData, { unpackTx });\n      return { ...acc, [name]: deserialized };\n    },\n    {},\n  ) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx or gaAttach\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  const params = unpackTx(contractTx);\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag } from '../tx/builder/constants';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse, getResponse);\n        // TODO: remove after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues.set(key, req.then(async () => pause(750)));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        if (error.response?.bodyAsText == null) throw error;\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          throw error;\n        }\n        error.message = `${new URL(error.request.url).pathname.slice(1)} error`;\n        const message = getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const statusesToNotRetry = [200, 400, 403];\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b);\n      const intervalsInMs = intervals.map((el) => (el / intervalSum) * retryOverallDelay);\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) await pause(intervalsInMs[attempt - 1]);\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\"\n        }\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\"\n        }\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\"\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"]\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\"\n        }\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"]\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\"\n            }\n          }\n        }\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\"\n            }\n          }\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"]\n        }\n      }\n    }\n  }\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\"\n        }\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"]\n        }\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\"\n            }\n          }\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\"\n        }\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\"\n        }\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\"\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\"\n        }\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"]\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper\n};\n\nexport const from: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const type: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"]\n    }\n  }\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CountResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/transactions/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.from,\n    Parameters.limit,\n    Parameters.type\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQuery\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n      }\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check node version\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion: version,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param gasUsed - Amount of gas actually used to make calculation more accurate\n * @param queryFee - Oracle query fee\n * @param isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param isMined - Is transaction already mined or not\n * @param options - Options\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(),\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl >= height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n);\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError, isAccountNotFoundError, pause } from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { DRY_RUN_ACCOUNT } from './tx/builder/schema';\nimport { AensName } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError, TransactionError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\n\n/**\n * @category chain\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock', // TODO: rename to 'key-block' | 'micro-block'\n  { _expectedMineRate = 180000, _microBlockCycle = 3000, _maxPollInterval = 5000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; _maxPollInterval?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.min(base / 3, _maxPollInterval);\n}\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @returns Current chain height\n */\nexport async function getHeight({ onNode }: { onNode: Node }): Promise<number> {\n  return (await onNode.getCurrentKeyBlockHeight()).height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ onNode }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ onNode }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= _getPollInterval('block', options);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = (await onNode.getCurrentKeyBlockHeight()).height;\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @param options.onNode - Node to use\n * @param options.onAccount - Account to use\n * @param options.verify - Verify transaction before broadcast, throw error if not\n * @param options.waitMined - Ensure that transaction get into block\n * @param options.confirm - Number of micro blocks that should be mined after tx get included\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      __queue != null ? { requestOptions: { customHeaders: { __queue } } } : {},\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && (confirm === true || confirm > 0)) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  onNode: Node;\n  onAccount: AccountBase;\n  verify?: boolean;\n  waitMined?: boolean;\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport {\n  CLIENT_TTL, NAME_TTL, Tag, AensName,\n} from './tx/builder/constants';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @param options.extendPointers - Get the pointers from the node and merge with provided\n * ones. Pointers with the same type will be overwritten\n * @param options.onAccount - Make operation on specific account from sdk (you\n * pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameTtl - Name ttl represented in number of\n * blocks (Max value is 50000 blocks)\n * @param options.clientTtl=84600 a suggestion as to how long any\n * clients should cache this information\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const nameUpdateTx = await buildTxAsync({\n    clientTtl: CLIENT_TTL,\n    nameTtl: NAME_TTL,\n    ...options,\n    tag: Tag.NameUpdateTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  extendPointers?: boolean;\n  clientTtl?: number;\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @returns\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl = NAME_TTL, options = {}) {\n      if (nameTtl > NAME_TTL || nameTtl <= 0) {\n        throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, nameTtl);\n      }\n\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid\n * @param options - options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameFee - Name Fee (By default calculated by sdk)\n * @returns the result of the claim\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string,\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (fraction < 0 || fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport {\n  ORACLE_TTL,\n  ORACLE_TTL_TYPES,\n  QUERY_TTL,\n  RESPONSE_TTL,\n} from './tx/builder/schema';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport {\n  _getPollInterval, getHeight, sendTransaction, SendTransactionOptions,\n} from './chain';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ onNode });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @param options.queryTtl - queryTtl Oracle query time to leave\n * @param options.responseTtl - queryFee Oracle query response time to leave\n * @param options.queryFee - queryFee Oracle query fee\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  options.queryFee ??= (await options.onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    queryTtlType: QUERY_TTL.type,\n    queryTtlValue: QUERY_TTL.value,\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query' | 'queryTtlType' | 'queryTtlValue' | 'responseTtlType' | 'responseTtlValue'>\n& {\n  queryTtlType?: ORACLE_TTL_TYPES;\n  queryTtlValue?: number;\n  responseTtlType?: ORACLE_TTL_TYPES;\n  responseTtlValue?: number;\n};\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @param options.oracleTtlType - Oracle time to leave for extend\n * @param options.oracleTtlValue - Oracle time to leave for extend\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    oracleTtlType: ORACLE_TTL.type,\n    oracleTtlValue: ORACLE_TTL.value,\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'oracleTtlType' | 'oracleTtlValue' | 'callerId' | 'oracleId'>\n& { oracleTtlType?: ORACLE_TTL_TYPES; oracleTtlValue?: number };\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @param options.responseTtl - responseTtl Query response time to leave\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response' | 'responseTtlType' | 'responseTtlValue'>\n& { responseTtlType?: ORACLE_TTL_TYPES; responseTtlValue?: number };\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @param options.queryFee - Oracle query Fee\n * @param options - Options object\n * @param options.abiVersion - Always 0 (do not use virtual machine)\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    oracleTtlValue: ORACLE_TTL.value,\n    oracleTtlType: ORACLE_TTL.type,\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat' | 'oracleTtlType' | 'oracleTtlValue'>\n& {\n  oracleTtlType?: ORACLE_TTL_TYPES;\n  oracleTtlValue?: number;\n};\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema';\nimport { Tag, AensName } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun, sendTransaction,\n  SendTransactionOptions,\n} from '../chain';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call(dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    this.$options.address = buildContractIdByContractTx(tx);\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(`Function ${name} doesn't exist in contract`);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const contractId = this.$options.address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && opt.amount > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null && top != null) {\n        const topKey = typeof top === 'number' ? 'height' : 'hash';\n        opt.nonce = (await getAccount(callerId, { [topKey]: top, onNode })).nonce + 1;\n      }\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { concatBuffers } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\nimport Node from '../Node';\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  options: { omitAddress?: boolean; onAccount: AccountBase; onNode: Node },\n): Promise<Uint8Array> {\n  return options.onAccount.sign(\n    concatBuffers([\n      Buffer.from(await options.onNode.getNetworkId()),\n      ...options.omitAddress === true ? [] : [decode(options.onAccount.address)],\n      ...ids.map((e) => (isNameValid(e) ? produceNameId(e) : e)).map((e) => decode(e)),\n      decode(contractAddress),\n    ]),\n    options,\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { sendTransaction, SendTransactionOptions, getAccount } from '../chain';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param sourceCode - Auth contract source code\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nexport function getValueOrErrorProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n  }\n\n  _getOptions(\n    callOptions: AeSdkMethodsOptions = {},\n  ): AeSdkMethodsOptions & { onAccount: AccountBase; onCompiler: CompilerBase; onNode: Node } {\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._options.onAccount),\n      onNode: getValueOrErrorProxy(() => this._options.onNode),\n      onCompiler: getValueOrErrorProxy(() => this._options.onCompiler),\n      ...callOptions,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this._getOptions(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this._getOptions(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & { onAccount: OnAccount } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this._getOptions(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, getValueOrErrorProxy, AeSdkMethodsOptions } from './AeSdkMethods';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  override _getOptions(callOptions: AeSdkMethodsOptions = {}): {\n    onNode: Node;\n    onAccount: AccountBase;\n    onCompiler: CompilerBase;\n  } {\n    return {\n      ...this._options,\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n      ...callOptions,\n      onAccount: getValueOrErrorProxy(() => this._resolveAccount(callOptions.onAccount)),\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport { decode, Encoded } from './utils/encoder';\nimport { UnavailableAccountError } from './utils/errors';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  constructor(\n    { accounts, ...options }: { accounts?: AccountBase[] }\n    & ConstructorParameters<typeof AeSdkBase>[0] = {},\n  ) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  #callbacks = new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>();\n\n  #messageId = 0;\n\n  #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string;\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport BigNumber from 'bignumber.js';\nimport { mapObject } from './other';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<typeof JsonBig['stringify']>): string => (\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1))\n  ),\n  parse: jsonBig.parse,\n};\n","import { v4 as uuid } from '@aeternity/uuid';\nimport AeSdk from './AeSdk';\nimport verifyTransaction from './tx/validator';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport {\n  METHODS, RPC_STATUS, SUBSCRIPTION_TYPES, WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError, RpcPermissionDenyError, RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema';\nimport { InternalError, UnknownRpcClientError } from './utils/errors';\nimport AccountBase from './account/Base';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types';\nimport { Encoded } from './utils/encoder';\nimport jsonBig from './utils/json-big';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string, params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>, origin: string\n) => void;\n\ntype OnSubscription = (\n  clientId: string, params: Parameters<WalletApi[METHODS.subscribeAddress]>[0], origin: string\n) => void;\n\ntype OnDisconnect = (\n  clientId: string, params: Parameters<WalletApi[METHODS.closeConnection]>[0]\n) => void;\n\ntype OnAskAccounts = (\n  clientId: string, params: undefined, origin: string\n) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientSubscribed(clientId))\n      .map((clientId) => this._getClient(clientId).rpc)\n      .forEach((client) => client.notify(METHODS.updateAddress, this.getAccounts()));\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...client.connectNode && this._getNode(),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientSubscribed(clientId: string): boolean {\n    return this._isRpcClientConnected(clientId)\n      && this._getClient(clientId).addressSubscription.size !== 0;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return RPC_STATUS.CONNECTED === this._getClient(clientId).status\n      && this._getClient(clientId).rpc.connection.isConnected();\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = uuid();\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({\n            name, version, icons, connectNode,\n          }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...await this.getWalletInfo(),\n              ...connectNode && this._getNode(),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            await this.onSubscription(id, { type, value }, origin);\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this.getAccounts(),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientSubscribed(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            {\n              tx, onAccount = this.address, returnSigned, innerTx,\n            },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount, aeppOrigin: origin, aeppRpcClientId: id, innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(jsonBig.stringify({\n                transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n              }));\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async ({\n            domain, aci, data, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain, onAccount, aeppOrigin: origin, aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: window.location.origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\"\n        }\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n          }\n        }\n      }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      }\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.3.0', '8.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    try {\n      const res = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as { bytecode: Encoded.ContractBytearray; aci: Aci };\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  #target?: ImplPostMessage;\n\n  #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=7883c6ac\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=226b1138\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(4395); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","_ctx","address","_hoisted_4","nodeName","_hoisted_5","_createVNode","_component_Value","value","balancePromise","onClick","_cache","args","$options","switchAccount","switchNode","disconnect","runningInFrame","_createElementBlock","ref","src","aeppUrl","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","arguments","length","undefined","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","_ref","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","key","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcMethodNotFoundError","AccountBase","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","type","reqLen","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","genSalt","random","BigUint64Array","nacl","Number","BigInt","MAX_SAFE_INTEGER","hash","generateKeyPairFromSecret","secret","keyPair","fromSecretKey","generateKeyPair","raw","publicBuffer","publicKey","secretBuffer","secretKey","sign","privateKey","detached","verify","signature","messagePrefix","messagePrefixLength","messageToHash","msg","hashJson","_canonicalize","canonicalize","encodeFateValue","aci","contractByteArrayEncoder","ContractByteArrayEncoder","aciTypeResolver","AciTypeResolver","isCustomType","resolveType","decodeFateValue","decodeWithType","hashDomain","domain","domainAci","record","option","hashTypedData","MAX_AUTH_FUN_GAS","NAME_TTL","NAME_MAX_CLIENT_TTL","CLIENT_TTL","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","serialize","params","_value","consensusProtocolVersion","prepare","options","keys","onNode","getNodeInfo","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","_ref2","result","_ref3","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","_len","encodings","Array","_key","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","oracleQueryId","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","coinAmount","parameters","genEncodedField","encoding","optional","encodedData","genEntryField","txParams","buildTx","ArrayBuffer","isView","startsWith","unpackTx","tx","genEnumerationField","enm","values","filter","v","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","_computingMinFee","_pickBiggerFee","minFee","gt","calculateGasLimitMax","gasMax","dividedBy","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","genMapField","Mtree","MtreeValue","_ref4","_ref5","recursiveType","rlpEncode","_rlp","NodeType","_rootHash","WeakMap","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","_classPrivateFieldGet","binary","unpTx","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","node","forEach","_classStaticPrivateMethodGet","_nodeHash","call","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","get","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","k","path","searchFrom","substring","rec","idx","_ref6","_ref7","genMPTreeField","field","txFields","addressName","genNonceField","senderKey","strategy","getAccountNextNonce","replace","catch","nextNonce","addressAny","pointers","pointer","genShortUIntConstField","constValue","constValueOptional","absoluteTtl","getCurrentKeyBlock","genWrappedField","_abiVersion","_address","_array","boolean","_boolean","_coinAmount","ctVersion","_ctVersion","deposit","_deposit","encoded","_encoded","entry","_entry","enumeration","_enumeration","_fee","_gasLimit","gasPrice","_gasPrice","_map","mptree","_mptree","_name","_nameFee","nameId","_nameId","_nonce","_pointers","_raw","_shortUInt","shortUIntConst","_shortUIntConst","_string","ttl","_ttl","_uInt","wrapped","_wrapped","ORACLE_TTL_TYPES","ORACLE_TTL","delta","QUERY_TTL","RESPONSE_TTL","DRY_RUN_ACCOUNT","pub","CallReturnType","entryAny","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","txSchema","balance","flags","gaContract","gaAuthFun","signatures","SpendTx","recipientId","accountId","nameTtl","status","clientTtl","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","NameTransferTx","NameRevokeTx","owner","log","active","referers","callData","callerId","contractId","callerNonce","gasUsed","returnValue","returnType","queryFormat","responseFormat","queryFee","oracleTtlValue","oracleTtlType","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","to","caller","contract","callStack","ChannelClientReconnectTx","role","pubkey","accounts","calls","channels","contracts","ns","oracles","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","_version","schemas","s","max","schema","overrideParams","buildTxAsync","all","reduce","acc","index","deserialized","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","secretKeys","getBufferToSign","networkId","innerTx","prefixes","rlpBinaryTx","AccountMemory","set","generate","signTransaction","txWithNetworkId","signMessage","signTypedData","dHash","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","base","componentsToNumber","components","reverse","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","Map","policy","sendRequest","request","next","_requestQueues$get","headers","delete","getResponse","req","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parse","e","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","attempt","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","target","pow","constraints","MinItems","MaxItems","element","time","info","pofHash","txsHash","ErrorModel","reason","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","transactions","blockHeight","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","defaultValue","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","top","txs","txEvents","DryRunAccount","pubKey","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","results","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","NameEntry","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","limit","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxs","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkey","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","getNetworkId","_classPrivateFieldGet2","nodeNetworkId","p","getTransactionSignerAddress","_getSchema$find","getExecutionCost","isInitiator","res","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","_getPollInterval","_expectedMineRate","_microBlockCycle","_maxPollInterval","block","microblock","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref8","oracleCall","contractCreate","contractCall","_ref9","InvalidTxError","validation","getHeight","poll","_interval","interval","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","sendTransaction","txUnsigned","onAccount","waitMined","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","assign","verifyTx","getAccount","getBalance","format","addr","getGeneration","hashOrHeight","_ref10","getMicroBlockTransactions","_ref11","getKeyBlock","_ref12","getMicroBlockHeader","_ref13","txDryRunRequests","txDryRunHandler","rs","dryRunRes","Set","accountAddress","_ref14","reject","_ref15","resultPayload","txDryRun","_ref16","_txDryRunRequests$get","combine","requests","_requests$timeout","timeout","getContractByteCode","_ref17","_ref18","getName","_ref19","resolveName","_ref20","resolveByNode","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","opts","otherOptions","aensBid","spend","recipientIdOrName","transferFunds","fraction","bind","desiredAmount","integerValue","ROUND_HALF_UP","payForTransaction","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","console","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","_options$queryFee","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","handler","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_aeternityAeppCalldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","_other$result","_calldata","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topKey","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_this","_aci","aciLast","functions","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","createDelegationSignature","ids","omitAddress","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","getValueOrErrorProxy","valueCb","Proxy","Reflect","_2","chainMethodsOther","chainMethods","methods","aensMethods","spendMethods","oracleMethods","contractGaMethods","AeSdkMethods","_options","_getOptions","callOptions","initializeContract","prototype","_len2","_key2","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","compilerApi","api","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","getNodesInPool","addresses","_resolveAccount","String","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","connection","onDisconnect","connect","_handleMessage2","_sendRequest2","notify","origin","jsonrpc","_processResponse2","methodName","_sendResponse2","sendMessage","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","_type","_pushAccountsToApps","_clients","clientId","_isRpcClientSubscribed","_getClient","rpc","client","updateAddress","getAccounts","_getNode","_isRpcClientConnected","updateNetwork","connectNode","addressSubscription","size","CONNECTED","isConnected","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","uuid","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","shareWalletInfo","readyToConnect","window","location","current","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","generateAciBySourceCode","generateAci","BrowserConnection","debug","onMessage","receiveMessage","_onDisconnect","_target","_self","BrowserWindowMessageConnection","self","sendDirection","receiveDirection","to_aepp","listener","_message$data$jsonrpc","_message$data$data","addEventListener","removeEventListener","_this$origin","postMessage","_normalizeClass","text","props","default","watch","valueToString","warn","immediate","__exports__","Value","process","parent","attemps","aeSdk","rpcClients","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","decodedData","$refs","aepp","contentWindow","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}