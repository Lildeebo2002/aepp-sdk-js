{"version":3,"file":"js/app.f6047231.js","mappings":"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","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/deposit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../src/aens.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../src/oracle.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/delegation-signature.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <h2>Wallet Iframe</h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button\n      v-if=\"clientStatus === 'CONNECTED'\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else\n      @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\"\n    >\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe\n    v-if=\"!runningInFrame\"\n    ref=\"aepp\"\n    :src=\"aeppUrl\"\n  />\n</template>\n\n<script>\nimport {\n  MemoryAccount, generateKeyPair, AeSdkWallet, Node, CompilerHttp,\n  BrowserWindowMessageConnection, METHODS, WALLET_TYPE, RPC_STATUS,\n  RpcConnectionDenyError, RpcRejectedByUserError, unpackTx, decodeFateValue,\n} from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    aeppUrl: process.env.VUE_APP_AEPP_URL ?? 'http://localhost:9001',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      }\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      this.nodeName = (await this.aeSdk.getNodesInPool())\n        .map(({ name }) => name)\n        .find((name) => name !== this.nodeName);\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (!confirm([\n        `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}`,\n        Value.methods.valueToString(parameters),\n      ].join('\\n'))) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, aci, decodedData: decodeFateValue(data, aci) };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async signDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation to contract')(id, opt, aeppOrigin);\n        }\n        return super.signDelegationToContract(contractAddress, options);\n      }\n\n      async signNameDelegationToContract(\n        contractAddress,\n        name,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, name };\n          genConfirmCallback('sign delegation of name to contract')(id, opt, aeppOrigin);\n        }\n        return super.signNameDelegationToContract(contractAddress, name, options);\n      }\n\n      async signOracleQueryDelegationToContract(\n        contractAddress,\n        oracleQueryId,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, oracleQueryId };\n          genConfirmCallback('sign delegation of oracle query to contract')(id, opt, aeppOrigin);\n        }\n        return super.signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n      }\n\n      static generate() {\n        // TODO: can inherit parent method after implementing https://github.com/aeternity/aepp-sdk-js/issues/1672\n        return new AccountMemoryProtected(generateKeyPair().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(({ clientId }) => [clientId], () => this.updateClientStatus(), { immediate: true });\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  #target?: ImplPostMessage;\n\n  #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param type - Type of data to sign\n   * @param data - Encoded data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param address - Address\n * @param prefix - Transaction prefix. Default: 'ak'\n * @returns is valid\n */\nexport function isAddressValid(\n  address: string,\n  prefix: Encoding = Encoding.AccountAddress,\n): boolean {\n  try {\n    decode(address as Encoded.Generic<typeof prefix>);\n    const actualPrefix = address.split('_')[0];\n    if (actualPrefix !== prefix) {\n      throw new ArgumentError('Encoded string type', prefix, actualPrefix);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Sign a message, and then verifying that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","// js extension is required for mjs build\n// @ts-expect-error see https://github.com/aeternity/aepp-calldata-js/issues/216\n// eslint-disable-next-line import/extensions\nimport ContractByteArrayEncoder from '@aeternity/aepp-calldata/src/ContractByteArrayEncoder.js';\n// @ts-expect-error see https://github.com/aeternity/aepp-calldata-js/issues/216\n// eslint-disable-next-line import/extensions\nimport AciTypeResolver from '@aeternity/aepp-calldata/src/AciTypeResolver.js';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n// TODO: replace with api on calldata side https://github.com/aeternity/aepp-calldata-js/issues/216\nexport function encodeFateValue(\n  value: unknown,\n  aci: AciValue,\n): Encoded.ContractBytearray {\n  const contractByteArrayEncoder = new ContractByteArrayEncoder();\n  const aciTypeResolver = new AciTypeResolver([]);\n  aciTypeResolver.isCustomType = () => false;\n  return contractByteArrayEncoder.encode(aciTypeResolver.resolveType(aci), value);\n}\n\n// TODO: replace with api on calldata side https://github.com/aeternity/aepp-calldata-js/issues/216\nexport function decodeFateValue(\n  value: Encoded.ContractBytearray,\n  aci: AciValue,\n): Encoded.ContractBytearray {\n  const contractByteArrayEncoder = new ContractByteArrayEncoder();\n  const aciTypeResolver = new AciTypeResolver([]);\n  aciTypeResolver.isCustomType = () => false;\n  return contractByteArrayEncoder.decodeWithType(value, aciTypeResolver.resolveType(aci));\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  return hash(decode(encodeFateValue(domain, domainAci)));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\n// # AENS\nexport type AensName = `${string}.chain`;\nexport const NAME_TTL = 180000;\n// # max number of block into the future that the name is going to be available\n// # https://github.com/aeternity/protocol/blob/epoch-v0.22.0/AENS.md#update\n// # https://github.com/aeternity/protocol/blob/44a93d3aab957ca820183c3520b9daf6b0fedff4/AENS.md#aens-entry\nexport const NAME_MAX_TTL = 36000;\nexport const NAME_MAX_CLIENT_TTL = 84600;\nexport const CLIENT_TTL = NAME_MAX_CLIENT_TTL;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);\n      return tx;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param name - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param name - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n      ),\n    );\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n      _pickBiggerFee?: boolean;\n    },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_pickBiggerFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger then ${minFee}`);\n    }\n    return value.toFixed();\n  },\n};\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl }: { onNode?: Node; absoluteTtl?: boolean },\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += (await onNode.getCurrentKeyBlock()).height;\n    }\n    return value;\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee Buffer\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport { IllegalArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...coinAmount,\n\n  /**\n   * @param value - Deposit value in string format. Should be equal to '0'.\n   * @param options - Options\n   * @param parameters - Parameters\n   * @returns Deposit value Buffer.\n   */\n  serialize(\n    value: Int | undefined,\n    options: Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    value ??= 0;\n    if (+value !== 0) throw new IllegalArgumentError(`Contract deposit is not refundable, so it should be equal 0, got ${value.toString()} instead`);\n    return coinAmount.serialize(value, options, parameters);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _pickBiggerFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger then ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, deposit, gasLimit, gasPrice, fee,\n  address, pointers, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # ORACLE\nexport const ORACLE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 500 };\nexport const QUERY_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\nexport const RESPONSE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl: shortUInt,\n  pointers,\n  clientTtl: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee: coinAmount,\n  queryTtlType: enumeration(ORACLE_TTL_TYPES),\n  queryTtlValue: shortUInt,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { BinaryData, Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId, readInt } from './helpers';\nimport { ArgumentError, DecodeError, SchemaNotFoundError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  const schemas = txSchema.filter((s) => s.tag.constValue === tag);\n  if (schemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  version ??= Math.max(...schemas.map((schema) => schema.version.constValue));\n  const schema = schemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction hash\n * @category transaction builder\n * @param params - Object with tx params\n * @param options - options\n * @param options.prefix - Prefix of transaction\n * @returns object Base64Check transaction hash with 'tx_' prefix\n */\nexport function buildTx<E extends TxEncoding = Encoding.Transaction>(\n  params: TxParams,\n  { prefix }: { prefix?: E } = {},\n): Encoded.Generic<E> {\n  const schema = getSchema(params.tag, params.version);\n\n  const binary = schema.map(([key, field]) => (\n    field.serialize(\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key],\n      {\n        ...params,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        unpackTx,\n        buildTx,\n        rebuildTx: (overrideParams: any) => buildTx(\n          { ...params, ...overrideParams },\n        ),\n      },\n      params,\n    )\n  ));\n\n  // @ts-expect-error looks like a TypeScript edge case\n  return encode(rlpEncode(binary), prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * @category transaction builder\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Transaction to unpack\n * @param txType - Expected transaction type\n * @returns Object with transaction param's\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  const binary = rlpDecode(decode(encodedTx));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(tag, version);\n  if (txType != null && txType !== tag) throw new DecodeError(`Expected transaction to have ${Tag[txType]} tag, got ${Tag[tag]} instead`);\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('Transaction RLP length', schema.length, binary.length);\n  }\n  return schema.reduce<any>(\n    (acc, [name, field], index) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const deserialized = field.deserialize(binary[index] as BinaryData, { unpackTx });\n      return { ...acc, [name]: deserialized };\n    },\n    {},\n  ) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx or gaAttach\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  const params = unpackTx(contractTx);\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse, getResponse);\n        // TODO: remove after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues.set(key, req.then(async () => pause(750)));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        if (error.response?.bodyAsText == null) throw error;\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          throw error;\n        }\n        error.message = `${new URL(error.request.url).pathname.slice(1)} error`;\n        const message = getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const statusesToNotRetry = [200, 400, 403];\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b);\n      const intervalsInMs = intervals.map((el) => (el / intervalSum) * retryOverallDelay);\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) await pause(intervalsInMs[attempt - 1]);\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\"\n        }\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\"\n        }\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\"\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"]\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\"\n        }\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"]\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\"\n            }\n          }\n        }\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\"\n            }\n          }\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"]\n        }\n      }\n    }\n  }\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\"\n        }\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"]\n        }\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\"\n            }\n          }\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\"\n        }\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\"\n        }\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\"\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\"\n        }\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"]\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper\n};\n\nexport const from: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const type: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"]\n    }\n  }\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CountResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/transactions/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.from,\n    Parameters.limit,\n    Parameters.type\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQuery\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n      }\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check node version\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion: version,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param gasUsed - Amount of gas actually used to make calculation more accurate\n * @param queryFee - Oracle query fee\n * @param isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param isMined - Is transaction already mined or not\n * @param options - Options\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(),\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl >= height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n);\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError, isAccountNotFoundError, pause } from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { DRY_RUN_ACCOUNT } from './tx/builder/schema';\nimport { AensName } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError, TransactionError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\n\n/**\n * @category chain\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock', // TODO: rename to 'key-block' | 'micro-block'\n  { _expectedMineRate = 180000, _microBlockCycle = 3000, _maxPollInterval = 5000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; _maxPollInterval?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.min(base / 3, _maxPollInterval);\n}\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @returns Current chain height\n */\nexport async function getHeight({ onNode }: { onNode: Node }): Promise<number> {\n  return (await onNode.getCurrentKeyBlockHeight()).height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ onNode }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ onNode }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= _getPollInterval('block', options);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = (await onNode.getCurrentKeyBlockHeight()).height;\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @param options.onNode - Node to use\n * @param options.onAccount - Account to use\n * @param options.verify - Verify transaction before broadcast, throw error if not\n * @param options.waitMined - Ensure that transaction get into block\n * @param options.confirm - Number of micro blocks that should be mined after tx get included\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      __queue != null ? { requestOptions: { customHeaders: { __queue } } } : {},\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  onNode: Node;\n  onAccount: AccountBase;\n  verify?: boolean;\n  waitMined?: boolean;\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport {\n  CLIENT_TTL, NAME_TTL, Tag, AensName,\n} from './tx/builder/constants';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @param options.extendPointers - Get the pointers from the node and merge with provided\n * ones. Pointers with the same type will be overwritten\n * @param options.onAccount - Make operation on specific account from sdk (you\n * pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameTtl - Name ttl represented in number of\n * blocks (Max value is 50000 blocks)\n * @param options.clientTtl=84600 a suggestion as to how long any\n * clients should cache this information\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const nameUpdateTx = await buildTxAsync({\n    clientTtl: CLIENT_TTL,\n    nameTtl: NAME_TTL,\n    ...options,\n    tag: Tag.NameUpdateTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  extendPointers?: boolean;\n  clientTtl?: number;\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @returns\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl = NAME_TTL, options = {}) {\n      if (nameTtl > NAME_TTL || nameTtl <= 0) {\n        throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, nameTtl);\n      }\n\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid\n * @param options - options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameFee - Name Fee (By default calculated by sdk)\n * @returns the result of the claim\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport {\n  ORACLE_TTL,\n  ORACLE_TTL_TYPES,\n  QUERY_TTL,\n  RESPONSE_TTL,\n} from './tx/builder/schema';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport {\n  _getPollInterval, getHeight, sendTransaction, SendTransactionOptions,\n} from './chain';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ onNode });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @param options.queryTtl - queryTtl Oracle query time to leave\n * @param options.responseTtl - queryFee Oracle query response time to leave\n * @param options.queryFee - queryFee Oracle query fee\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  options.queryFee ??= (await options.onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    queryTtlType: QUERY_TTL.type,\n    queryTtlValue: QUERY_TTL.value,\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query' | 'queryTtlType' | 'queryTtlValue' | 'responseTtlType' | 'responseTtlValue'>\n& {\n  queryTtlType?: ORACLE_TTL_TYPES;\n  queryTtlValue?: number;\n  responseTtlType?: ORACLE_TTL_TYPES;\n  responseTtlValue?: number;\n};\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @param options.oracleTtlType - Oracle time to leave for extend\n * @param options.oracleTtlValue - Oracle time to leave for extend\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    oracleTtlType: ORACLE_TTL.type,\n    oracleTtlValue: ORACLE_TTL.value,\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'oracleTtlType' | 'oracleTtlValue' | 'callerId' | 'oracleId'>\n& { oracleTtlType?: ORACLE_TTL_TYPES; oracleTtlValue?: number };\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @param options.responseTtl - responseTtl Query response time to leave\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response' | 'responseTtlType' | 'responseTtlValue'>\n& { responseTtlType?: ORACLE_TTL_TYPES; responseTtlValue?: number };\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @param options.queryFee - Oracle query Fee\n * @param options - Options object\n * @param options.abiVersion - Always 0 (do not use virtual machine)\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    oracleTtlValue: ORACLE_TTL.value,\n    oracleTtlType: ORACLE_TTL.type,\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat' | 'oracleTtlType' | 'oracleTtlValue'>\n& {\n  oracleTtlType?: ORACLE_TTL_TYPES;\n  oracleTtlValue?: number;\n};\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema';\nimport { Tag, AensName } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun, sendTransaction,\n  SendTransactionOptions,\n} from '../chain';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call(dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    this.$options.address = buildContractIdByContractTx(tx);\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(`Function ${name} doesn't exist in contract`);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const contractId = this.$options.address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null && top != null) {\n        const topKey = typeof top === 'number' ? 'height' : 'hash';\n        opt.nonce = (await getAccount(callerId, { [topKey]: top, onNode })).nonce + 1;\n      }\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  { onAccount, omitAddress, ...options }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const networkId = await options.onNode.getNetworkId();\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(await onAccount.signDelegationToContract(contractAddress, { networkId }));\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, { networkId }),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, { networkId }),\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { sendTransaction, SendTransactionOptions, getAccount } from '../chain';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param sourceCode - Auth contract source code\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nexport function getValueOrErrorProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n  }\n\n  _getOptions(\n    callOptions: AeSdkMethodsOptions = {},\n  ): AeSdkMethodsOptions & { onAccount: AccountBase; onCompiler: CompilerBase; onNode: Node } {\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._options.onAccount),\n      onNode: getValueOrErrorProxy(() => this._options.onNode),\n      onCompiler: getValueOrErrorProxy(() => this._options.onCompiler),\n      ...callOptions,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this._getOptions(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this._getOptions(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & { onAccount: OnAccount } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this._getOptions(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, getValueOrErrorProxy, AeSdkMethodsOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  override _getOptions(callOptions: AeSdkMethodsOptions = {}): {\n    onNode: Node;\n    onAccount: AccountBase;\n    onCompiler: CompilerBase;\n  } {\n    return {\n      ...this._options,\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n      ...callOptions,\n      onAccount: getValueOrErrorProxy(() => this._resolveAccount(callOptions.onAccount)),\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport { decode, Encoded } from './utils/encoder';\nimport { UnavailableAccountError } from './utils/errors';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  constructor(\n    { accounts, ...options }: { accounts?: AccountBase[] }\n    & ConstructorParameters<typeof AeSdkBase>[0] = {},\n  ) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  #callbacks = new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>();\n\n  #messageId = 0;\n\n  #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport BigNumber from 'bignumber.js';\nimport { mapObject } from './other';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<typeof JsonBig['stringify']>): string => (\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1))\n  ),\n  parse: jsonBig.parse,\n};\n","import { v4 as uuid } from '@aeternity/uuid';\nimport AeSdk from './AeSdk';\nimport verifyTransaction from './tx/validator';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport {\n  METHODS, RPC_STATUS, SUBSCRIPTION_TYPES, WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError, RpcPermissionDenyError, RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema';\nimport { InternalError, UnknownRpcClientError } from './utils/errors';\nimport AccountBase from './account/Base';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types';\nimport { Encoded } from './utils/encoder';\nimport jsonBig from './utils/json-big';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string, params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>, origin: string\n) => void;\n\ntype OnSubscription = (\n  clientId: string, params: Parameters<WalletApi[METHODS.subscribeAddress]>[0], origin: string\n) => void;\n\ntype OnDisconnect = (\n  clientId: string, params: Parameters<WalletApi[METHODS.closeConnection]>[0]\n) => void;\n\ntype OnAskAccounts = (\n  clientId: string, params: undefined, origin: string\n) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current: addressSubscription.has('current') || addressSubscription.has('connected')\n        ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) => client.rpc\n        .notify(METHODS.updateAddress, this._getAccountsForClient(client)));\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...client.connectNode && this._getNode(),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return RPC_STATUS.CONNECTED === this._getClient(clientId).status\n      && this._getClient(clientId).rpc.connection.isConnected();\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = uuid();\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({\n            name, version, icons, connectNode,\n          }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...await this.getWalletInfo(),\n              ...connectNode && this._getNode(),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            {\n              tx, onAccount = this.address, returnSigned, innerTx,\n            },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount, aeppOrigin: origin, aeppRpcClientId: id, innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(jsonBig.stringify({\n                transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n              }));\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async ({\n            domain, aci, data, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain, onAccount, aeppOrigin: origin, aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.signDelegationToContract]: async ({\n            contractAddress, name, oracleQueryId, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await (\n              (name == null ? null : this\n                .signNameDelegationToContract(contractAddress, name, parameters))\n              ?? (oracleQueryId == null ? null : this\n                .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, parameters))\n              ?? this.signDelegationToContract(contractAddress, parameters)\n            );\n            return { signature };\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: window.location.origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\"\n        }\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n          }\n        }\n      }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      }\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.3.0', '8.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    try {\n      const res = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as { bytecode: Encoded.ContractBytearray; aci: Aci };\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=7883c6ac\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=4e4a0039\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(4773); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","_ctx","address","_hoisted_4","nodeName","_hoisted_5","_createVNode","_component_Value","value","balancePromise","_hoisted_6","clientStatus","clientId","onClick","_cache","args","$options","switchAccount","switchNode","_createElementBlock","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","ref","src","aeppUrl","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","arguments","length","undefined","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","_ref","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","key","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","type","addEventListener","removeEventListener","call","msg","_this$origin","postMessage","AccountBase","signTypedData","aci","signDelegationToContract","signNameDelegationToContract","signOracleQueryDelegationToContract","oracleQueryId","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","genSalt","random","BigUint64Array","nacl","Number","BigInt","MAX_SAFE_INTEGER","hash","generateKeyPairFromSecret","secret","keyPair","fromSecretKey","generateKeyPair","raw","publicBuffer","publicKey","secretBuffer","secretKey","sign","privateKey","detached","verify","signature","messagePrefix","messagePrefixLength","messageToHash","hashJson","_canonicalize","canonicalize","encodeFateValue","contractByteArrayEncoder","ContractByteArrayEncoder","aciTypeResolver","AciTypeResolver","isCustomType","resolveType","decodeFateValue","decodeWithType","hashDomain","domain","domainAci","record","option","hashTypedData","MAX_AUTH_FUN_GAS","NAME_TTL","NAME_MAX_CLIENT_TTL","CLIENT_TTL","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","genEntryField","serialize","txParams","buildTx","ArrayBuffer","isView","startsWith","buf","_ref2","unpackTx","tx","genArrayField","itemHandler","items","params","buffers","genMapField","encoding","Mtree","values","MtreeValue","_ref3","filter","_ref4","_ref5","recursiveType","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","genShortUIntConstField","constValue","optional","shortUInt","constValueOptional","idTagToEncoding","genAddressField","_len","encodings","Array","_key","hashId","enc","idTag","indexOf","readUIntBE","subarray","genEncodedField","encodedData","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","serializeAettos","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","coinAmount","_value","_computingMinFee","_pickBiggerFee","minFee","gt","prepare","onNode","absoluteTtl","getCurrentKeyBlock","genNonceField","senderKey","strategy","getAccountNextNonce","replace","catch","nextNonce","addressAny","pointers","pointer","field","txFields","parameters","addressName","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","consensusProtocolVersion","keys","getNodeInfo","vm","abi","calculateGasLimitMax","gasMax","dividedBy","_computingGasLimit","gasLimitMax","gasLimit","_getProtocolDetails","c","kind","result","genEnumerationField","enm","v","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","node","forEach","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","get","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","k","path","searchFrom","substring","rec","idx","_ref6","_ref7","genMPTreeField","genWrappedField","ORACLE_TTL_TYPES","ORACLE_TTL","delta","QUERY_TTL","RESPONSE_TTL","DRY_RUN_ACCOUNT","pub","CallReturnType","entryAny","entry","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","txSchema","shortUIntConst","balance","flags","gaContract","gaAuthFun","encoded","signatures","SpendTx","recipientId","ttl","accountId","nameTtl","status","clientTtl","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","NameTransferTx","NameRevokeTx","owner","ctVersion","active","boolean","referers","deposit","gasPrice","callData","callerId","contractId","callerNonce","gasUsed","returnValue","returnType","enumeration","queryFormat","responseFormat","queryFee","oracleTtlValue","oracleTtlType","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","to","caller","contract","callStack","ChannelClientReconnectTx","role","pubkey","accounts","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","_version","schemas","s","max","schema","overrideParams","buildTxAsync","all","reduce","acc","index","deserialized","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","secretKeys","getBufferToSign","networkId","innerTx","prefixes","rlpBinaryTx","AccountMemory","set","generate","signTransaction","txWithNetworkId","signMessage","dHash","oracleQueryIdDecoded","addressDecoded","compare","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","base","componentsToNumber","components","reverse","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","Map","policy","sendRequest","request","next","_requestQueues$get","headers","delete","getResponse","req","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parse","e","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","attempt","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","time","info","pofHash","txsHash","ErrorModel","reason","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","transactions","blockHeight","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","defaultValue","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","top","txs","txEvents","DryRunAccount","pubKey","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","results","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","NameEntry","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","limit","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxs","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkey","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","getNetworkId","_classPrivateFieldGet2","nodeNetworkId","p","getTransactionSignerAddress","_getSchema$find","getExecutionCost","isInitiator","res","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","_getPollInterval","_expectedMineRate","_microBlockCycle","_maxPollInterval","block","microblock","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref8","oracleCall","contractCreate","contractCall","_ref9","InvalidTxError","validation","getHeight","poll","_interval","interval","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","sendTransaction","txUnsigned","onAccount","waitMined","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","assign","verifyTx","getAccount","getBalance","format","addr","getGeneration","hashOrHeight","_ref10","getMicroBlockTransactions","_ref11","getKeyBlock","_ref12","getMicroBlockHeader","_ref13","txDryRunRequests","txDryRunHandler","rs","dryRunRes","Set","accountAddress","_ref14","reject","_ref15","resultPayload","txDryRun","_ref16","_txDryRunRequests$get","combine","requests","_requests$timeout","timeout","getContractByteCode","_ref17","_ref18","getName","_ref19","resolveName","_ref20","resolveByNode","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","opts","otherOptions","aensBid","spend","recipientIdOrName","transferFunds","fraction","bind","desiredAmount","integerValue","ROUND_HALF_UP","payForTransaction","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","_options$queryFee","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","handler","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_aeternityAeppCalldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","_other$result","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topKey","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_this","_aci","aciLast","functions","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","getValueOrErrorProxy","valueCb","Proxy","Reflect","_2","chainMethodsOther","chainMethods","methods","aensMethods","spendMethods","oracleMethods","contractGaMethods","AeSdkMethods","_options","_getOptions","callOptions","initializeContract","prototype","_len2","_key2","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","compilerApi","api","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","getNodesInPool","addresses","_resolveAccount","String","_options$networkId","_options$networkId2","_options$networkId3","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","connection","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","uuid","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","readyToConnect","location","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","generateAciBySourceCode","generateAci","_normalizeClass","text","props","default","watch","valueToString","warn","immediate","__exports__","Value","process","parent","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","decodedData","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}